// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tag.proto

package meta_egg_layout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TagDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagDetailMultiError, or nil
// if none found.
func (m *TagDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *TagDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return TagDetailMultiError(errors)
	}

	return nil
}

// TagDetailMultiError is an error wrapping multiple validation errors returned
// by TagDetail.ValidateAll() if the designated constraints aren't met.
type TagDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagDetailMultiError) AllErrors() []error { return m }

// TagDetailValidationError is the validation error returned by
// TagDetail.Validate if the designated constraints aren't met.
type TagDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagDetailValidationError) ErrorName() string { return "TagDetailValidationError" }

// Error satisfies the builtin error interface
func (e TagDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagDetailValidationError{}

// Validate checks the field values on CreateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagRequestMultiError, or nil if none found.
func (m *CreateTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTagRequestMultiError(errors)
	}

	return nil
}

// CreateTagRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTagRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagRequestMultiError) AllErrors() []error { return m }

// CreateTagRequestValidationError is the validation error returned by
// CreateTagRequest.Validate if the designated constraints aren't met.
type CreateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagRequestValidationError) ErrorName() string { return "CreateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagRequestValidationError{}

// Validate checks the field values on GetTagDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagDetailRequestMultiError, or nil if none found.
func (m *GetTagDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetTagDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTagDetailRequestMultiError(errors)
	}

	return nil
}

// GetTagDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetTagDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTagDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagDetailRequestMultiError) AllErrors() []error { return m }

// GetTagDetailRequestValidationError is the validation error returned by
// GetTagDetailRequest.Validate if the designated constraints aren't met.
type GetTagDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagDetailRequestValidationError) ErrorName() string {
	return "GetTagDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagDetailRequestValidationError{}

// Validate checks the field values on TagListInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagListInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagListInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagListInfoMultiError, or
// nil if none found.
func (m *TagListInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TagListInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return TagListInfoMultiError(errors)
	}

	return nil
}

// TagListInfoMultiError is an error wrapping multiple validation errors
// returned by TagListInfo.ValidateAll() if the designated constraints aren't met.
type TagListInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagListInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagListInfoMultiError) AllErrors() []error { return m }

// TagListInfoValidationError is the validation error returned by
// TagListInfo.Validate if the designated constraints aren't met.
type TagListInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagListInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagListInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagListInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagListInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagListInfoValidationError) ErrorName() string { return "TagListInfoValidationError" }

// Error satisfies the builtin error interface
func (e TagListInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagListInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagListInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagListInfoValidationError{}

// Validate checks the field values on GetTagListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTagListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagListRequestMultiError, or nil if none found.
func (m *GetTagListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTagListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTagListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTagListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OrderBy != nil {

		if _, ok := _GetTagListRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetTagListRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderType != nil {

		if _, ok := _GetTagListRequest_OrderType_InLookup[m.GetOrderType()]; !ok {
			err := GetTagListRequestValidationError{
				field:  "OrderType",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetTagListRequestMultiError(errors)
	}

	return nil
}

// GetTagListRequestMultiError is an error wrapping multiple validation errors
// returned by GetTagListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTagListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagListRequestMultiError) AllErrors() []error { return m }

// GetTagListRequestValidationError is the validation error returned by
// GetTagListRequest.Validate if the designated constraints aren't met.
type GetTagListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagListRequestValidationError) ErrorName() string {
	return "GetTagListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagListRequestValidationError{}

var _GetTagListRequest_OrderBy_InLookup = map[string]struct{}{
	"id": {},
}

var _GetTagListRequest_OrderType_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetTagListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagListResponseMultiError, or nil if none found.
func (m *GetTagListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTagListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTagListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTagListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetTagListResponseMultiError(errors)
	}

	return nil
}

// GetTagListResponseMultiError is an error wrapping multiple validation errors
// returned by GetTagListResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTagListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagListResponseMultiError) AllErrors() []error { return m }

// GetTagListResponseValidationError is the validation error returned by
// GetTagListResponse.Validate if the designated constraints aren't met.
type GetTagListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagListResponseValidationError) ErrorName() string {
	return "GetTagListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagListResponseValidationError{}

// Validate checks the field values on UpdateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagRequestMultiError, or nil if none found.
func (m *UpdateTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateTagRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateTagRequestMultiError(errors)
	}

	return nil
}

// UpdateTagRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTagRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagRequestMultiError) AllErrors() []error { return m }

// UpdateTagRequestValidationError is the validation error returned by
// UpdateTagRequest.Validate if the designated constraints aren't met.
type UpdateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagRequestValidationError) ErrorName() string { return "UpdateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagRequestValidationError{}

// Validate checks the field values on DeleteTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagRequestMultiError, or nil if none found.
func (m *DeleteTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteTagRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTagRequestMultiError(errors)
	}

	return nil
}

// DeleteTagRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTagRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagRequestMultiError) AllErrors() []error { return m }

// DeleteTagRequestValidationError is the validation error returned by
// DeleteTagRequest.Validate if the designated constraints aren't met.
type DeleteTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagRequestValidationError) ErrorName() string { return "DeleteTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagRequestValidationError{}
