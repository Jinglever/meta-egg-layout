// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_tag.proto

package meta_egg_layout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTagListByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagListByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagListByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagListByUserIDRequestMultiError, or nil if none found.
func (m *GetTagListByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagListByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTagListByUserIDRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTagListByUserIDRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTagListByUserIDRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.OrderType != nil {
		// no validation rules for OrderType
	}

	if len(errors) > 0 {
		return GetTagListByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetTagListByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetTagListByUserIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTagListByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagListByUserIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagListByUserIDRequestMultiError) AllErrors() []error { return m }

// GetTagListByUserIDRequestValidationError is the validation error returned by
// GetTagListByUserIDRequest.Validate if the designated constraints aren't met.
type GetTagListByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagListByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagListByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagListByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagListByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagListByUserIDRequestValidationError) ErrorName() string {
	return "GetTagListByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagListByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagListByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagListByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagListByUserIDRequestValidationError{}

// Validate checks the field values on GetUserListByTagIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListByTagIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListByTagIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListByTagIDRequestMultiError, or nil if none found.
func (m *GetUserListByTagIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListByTagIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListByTagIDRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListByTagIDRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListByTagIDRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.IsOnJob != nil {
		// no validation rules for IsOnJob
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.OrderType != nil {
		// no validation rules for OrderType
	}

	if len(errors) > 0 {
		return GetUserListByTagIDRequestMultiError(errors)
	}

	return nil
}

// GetUserListByTagIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserListByTagIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUserListByTagIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListByTagIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListByTagIDRequestMultiError) AllErrors() []error { return m }

// GetUserListByTagIDRequestValidationError is the validation error returned by
// GetUserListByTagIDRequest.Validate if the designated constraints aren't met.
type GetUserListByTagIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListByTagIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListByTagIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListByTagIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListByTagIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListByTagIDRequestValidationError) ErrorName() string {
	return "GetUserListByTagIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListByTagIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListByTagIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListByTagIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListByTagIDRequestValidationError{}

// Validate checks the field values on BindTagsToUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindTagsToUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindTagsToUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindTagsToUserRequestMultiError, or nil if none found.
func (m *BindTagsToUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindTagsToUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return BindTagsToUserRequestMultiError(errors)
	}

	return nil
}

// BindTagsToUserRequestMultiError is an error wrapping multiple validation
// errors returned by BindTagsToUserRequest.ValidateAll() if the designated
// constraints aren't met.
type BindTagsToUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindTagsToUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindTagsToUserRequestMultiError) AllErrors() []error { return m }

// BindTagsToUserRequestValidationError is the validation error returned by
// BindTagsToUserRequest.Validate if the designated constraints aren't met.
type BindTagsToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindTagsToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindTagsToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindTagsToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindTagsToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindTagsToUserRequestValidationError) ErrorName() string {
	return "BindTagsToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindTagsToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindTagsToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindTagsToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindTagsToUserRequestValidationError{}

// Validate checks the field values on BindUsersToTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindUsersToTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindUsersToTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindUsersToTagRequestMultiError, or nil if none found.
func (m *BindUsersToTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindUsersToTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	if len(errors) > 0 {
		return BindUsersToTagRequestMultiError(errors)
	}

	return nil
}

// BindUsersToTagRequestMultiError is an error wrapping multiple validation
// errors returned by BindUsersToTagRequest.ValidateAll() if the designated
// constraints aren't met.
type BindUsersToTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindUsersToTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindUsersToTagRequestMultiError) AllErrors() []error { return m }

// BindUsersToTagRequestValidationError is the validation error returned by
// BindUsersToTagRequest.Validate if the designated constraints aren't met.
type BindUsersToTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindUsersToTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindUsersToTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindUsersToTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindUsersToTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindUsersToTagRequestValidationError) ErrorName() string {
	return "BindUsersToTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindUsersToTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindUsersToTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindUsersToTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindUsersToTagRequestValidationError{}

// Validate checks the field values on UnbindTagsFromUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindTagsFromUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindTagsFromUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindTagsFromUserRequestMultiError, or nil if none found.
func (m *UnbindTagsFromUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindTagsFromUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnbindTagsFromUserRequestMultiError(errors)
	}

	return nil
}

// UnbindTagsFromUserRequestMultiError is an error wrapping multiple validation
// errors returned by UnbindTagsFromUserRequest.ValidateAll() if the
// designated constraints aren't met.
type UnbindTagsFromUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindTagsFromUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindTagsFromUserRequestMultiError) AllErrors() []error { return m }

// UnbindTagsFromUserRequestValidationError is the validation error returned by
// UnbindTagsFromUserRequest.Validate if the designated constraints aren't met.
type UnbindTagsFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindTagsFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindTagsFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindTagsFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindTagsFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindTagsFromUserRequestValidationError) ErrorName() string {
	return "UnbindTagsFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindTagsFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindTagsFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindTagsFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindTagsFromUserRequestValidationError{}

// Validate checks the field values on UnbindUsersFromTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindUsersFromTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindUsersFromTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindUsersFromTagRequestMultiError, or nil if none found.
func (m *UnbindUsersFromTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindUsersFromTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	if len(errors) > 0 {
		return UnbindUsersFromTagRequestMultiError(errors)
	}

	return nil
}

// UnbindUsersFromTagRequestMultiError is an error wrapping multiple validation
// errors returned by UnbindUsersFromTagRequest.ValidateAll() if the
// designated constraints aren't met.
type UnbindUsersFromTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindUsersFromTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindUsersFromTagRequestMultiError) AllErrors() []error { return m }

// UnbindUsersFromTagRequestValidationError is the validation error returned by
// UnbindUsersFromTagRequest.Validate if the designated constraints aren't met.
type UnbindUsersFromTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindUsersFromTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindUsersFromTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindUsersFromTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindUsersFromTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindUsersFromTagRequestValidationError) ErrorName() string {
	return "UnbindUsersFromTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindUsersFromTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindUsersFromTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindUsersFromTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindUsersFromTagRequestValidationError{}
