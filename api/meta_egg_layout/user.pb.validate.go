// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package meta_egg_layout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDetailMultiError, or
// nil if none found.
func (m *UserDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Gender

	// no validation rules for Age

	// no validation rules for IsOnJob

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetUserPhones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserDetailValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserDetailValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDetailValidationError{
					field:  fmt.Sprintf("UserPhones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Birthday != nil {
		// no validation rules for Birthday
	}

	if m.CreatedBy != nil {
		// no validation rules for CreatedBy
	}

	if m.UpdatedBy != nil {
		// no validation rules for UpdatedBy
	}

	if len(errors) > 0 {
		return UserDetailMultiError(errors)
	}

	return nil
}

// UserDetailMultiError is an error wrapping multiple validation errors
// returned by UserDetail.ValidateAll() if the designated constraints aren't met.
type UserDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailMultiError) AllErrors() []error { return m }

// UserDetailValidationError is the validation error returned by
// UserDetail.Validate if the designated constraints aren't met.
type UserDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailValidationError) ErrorName() string { return "UserDetailValidationError" }

// Error satisfies the builtin error interface
func (e UserDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGender() < 1 {
		err := CreateUserRequestValidationError{
			field:  "Gender",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Age

	// no validation rules for IsOnJob

	for idx, item := range m.GetUserPhones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserRequestValidationError{
					field:  fmt.Sprintf("UserPhones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) > 64 {
			err := CreateUserRequestValidationError{
				field:  "Name",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Birthday != nil {

		if !_CreateUserRequest_Birthday_Pattern.MatchString(m.GetBirthday()) {
			err := CreateUserRequestValidationError{
				field:  "Birthday",
				reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

var _CreateUserRequest_Birthday_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}$")

// Validate checks the field values on GetUserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDetailRequestMultiError, or nil if none found.
func (m *GetUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetUserDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserDetailRequestMultiError(errors)
	}

	return nil
}

// GetUserDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDetailRequestMultiError) AllErrors() []error { return m }

// GetUserDetailRequestValidationError is the validation error returned by
// GetUserDetailRequest.Validate if the designated constraints aren't met.
type GetUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDetailRequestValidationError) ErrorName() string {
	return "GetUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDetailRequestValidationError{}

// Validate checks the field values on UserListInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserListInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListInfoMultiError, or
// nil if none found.
func (m *UserListInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Gender

	for idx, item := range m.GetUserPhones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListInfoValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListInfoValidationError{
						field:  fmt.Sprintf("UserPhones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListInfoValidationError{
					field:  fmt.Sprintf("UserPhones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return UserListInfoMultiError(errors)
	}

	return nil
}

// UserListInfoMultiError is an error wrapping multiple validation errors
// returned by UserListInfo.ValidateAll() if the designated constraints aren't met.
type UserListInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListInfoMultiError) AllErrors() []error { return m }

// UserListInfoValidationError is the validation error returned by
// UserListInfo.Validate if the designated constraints aren't met.
type UserListInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListInfoValidationError) ErrorName() string { return "UserListInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserListInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListInfoValidationError{}

// Validate checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListRequestMultiError, or nil if none found.
func (m *GetUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Gender != nil {

		if m.GetGender() < 1 {
			err := GetUserListRequestValidationError{
				field:  "Gender",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.IsOnJob != nil {
		// no validation rules for IsOnJob
	}

	if m.OrderBy != nil {

		if _, ok := _GetUserListRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetUserListRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderType != nil {

		if _, ok := _GetUserListRequest_OrderType_InLookup[m.GetOrderType()]; !ok {
			err := GetUserListRequestValidationError{
				field:  "OrderType",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetUserListRequestMultiError(errors)
	}

	return nil
}

// GetUserListRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListRequestMultiError) AllErrors() []error { return m }

// GetUserListRequestValidationError is the validation error returned by
// GetUserListRequest.Validate if the designated constraints aren't met.
type GetUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListRequestValidationError) ErrorName() string {
	return "GetUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListRequestValidationError{}

var _GetUserListRequest_OrderBy_InLookup = map[string]struct{}{
	"id": {},
}

var _GetUserListRequest_OrderType_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListResponseMultiError, or nil if none found.
func (m *GetUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUserListResponseMultiError(errors)
	}

	return nil
}

// GetUserListResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListResponseMultiError) AllErrors() []error { return m }

// GetUserListResponseValidationError is the validation error returned by
// GetUserListResponse.Validate if the designated constraints aren't met.
type GetUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListResponseValidationError) ErrorName() string {
	return "GetUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) > 64 {
			err := UpdateUserRequestValidationError{
				field:  "Name",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Gender != nil {

		if m.GetGender() < 1 {
			err := UpdateUserRequestValidationError{
				field:  "Gender",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Age != nil {
		// no validation rules for Age
	}

	if m.IsOnJob != nil {
		// no validation rules for IsOnJob
	}

	if m.Birthday != nil {

		if !_UpdateUserRequest_Birthday_Pattern.MatchString(m.GetBirthday()) {
			err := UpdateUserRequestValidationError{
				field:  "Birthday",
				reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

var _UpdateUserRequest_Birthday_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}$")

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on UserPhoneDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPhoneDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPhoneDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPhoneDetailMultiError, or nil if none found.
func (m *UserPhoneDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPhoneDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for PhoneNumber

	// no validation rules for CreatedAt

	if m.CreatedBy != nil {
		// no validation rules for CreatedBy
	}

	if len(errors) > 0 {
		return UserPhoneDetailMultiError(errors)
	}

	return nil
}

// UserPhoneDetailMultiError is an error wrapping multiple validation errors
// returned by UserPhoneDetail.ValidateAll() if the designated constraints
// aren't met.
type UserPhoneDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPhoneDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPhoneDetailMultiError) AllErrors() []error { return m }

// UserPhoneDetailValidationError is the validation error returned by
// UserPhoneDetail.Validate if the designated constraints aren't met.
type UserPhoneDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPhoneDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPhoneDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPhoneDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPhoneDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPhoneDetailValidationError) ErrorName() string { return "UserPhoneDetailValidationError" }

// Error satisfies the builtin error interface
func (e UserPhoneDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPhoneDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPhoneDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPhoneDetailValidationError{}

// Validate checks the field values on UserPhoneListInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPhoneListInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPhoneListInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPhoneListInfoMultiError, or nil if none found.
func (m *UserPhoneListInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPhoneListInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return UserPhoneListInfoMultiError(errors)
	}

	return nil
}

// UserPhoneListInfoMultiError is an error wrapping multiple validation errors
// returned by UserPhoneListInfo.ValidateAll() if the designated constraints
// aren't met.
type UserPhoneListInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPhoneListInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPhoneListInfoMultiError) AllErrors() []error { return m }

// UserPhoneListInfoValidationError is the validation error returned by
// UserPhoneListInfo.Validate if the designated constraints aren't met.
type UserPhoneListInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPhoneListInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPhoneListInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPhoneListInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPhoneListInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPhoneListInfoValidationError) ErrorName() string {
	return "UserPhoneListInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UserPhoneListInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPhoneListInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPhoneListInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPhoneListInfoValidationError{}

// Validate checks the field values on UserPhoneCreateData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPhoneCreateData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPhoneCreateData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPhoneCreateDataMultiError, or nil if none found.
func (m *UserPhoneCreateData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPhoneCreateData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhoneNumber()) > 20 {
		err := UserPhoneCreateDataValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserPhoneCreateDataMultiError(errors)
	}

	return nil
}

// UserPhoneCreateDataMultiError is an error wrapping multiple validation
// errors returned by UserPhoneCreateData.ValidateAll() if the designated
// constraints aren't met.
type UserPhoneCreateDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPhoneCreateDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPhoneCreateDataMultiError) AllErrors() []error { return m }

// UserPhoneCreateDataValidationError is the validation error returned by
// UserPhoneCreateData.Validate if the designated constraints aren't met.
type UserPhoneCreateDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPhoneCreateDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPhoneCreateDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPhoneCreateDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPhoneCreateDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPhoneCreateDataValidationError) ErrorName() string {
	return "UserPhoneCreateDataValidationError"
}

// Error satisfies the builtin error interface
func (e UserPhoneCreateDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPhoneCreateData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPhoneCreateDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPhoneCreateDataValidationError{}

// Validate checks the field values on AddUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserPhoneRequestMultiError, or nil if none found.
func (m *AddUserPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := AddUserPhoneRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhoneNumber()) > 20 {
		err := AddUserPhoneRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUserPhoneRequestMultiError(errors)
	}

	return nil
}

// AddUserPhoneRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserPhoneRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPhoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPhoneRequestMultiError) AllErrors() []error { return m }

// AddUserPhoneRequestValidationError is the validation error returned by
// AddUserPhoneRequest.Validate if the designated constraints aren't met.
type AddUserPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPhoneRequestValidationError) ErrorName() string {
	return "AddUserPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPhoneRequestValidationError{}

// Validate checks the field values on RemoveUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUserPhoneRequestMultiError, or nil if none found.
func (m *RemoveUserPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := RemoveUserPhoneRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserPhoneId() < 1 {
		err := RemoveUserPhoneRequestValidationError{
			field:  "UserPhoneId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveUserPhoneRequestMultiError(errors)
	}

	return nil
}

// RemoveUserPhoneRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveUserPhoneRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveUserPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPhoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPhoneRequestMultiError) AllErrors() []error { return m }

// RemoveUserPhoneRequestValidationError is the validation error returned by
// RemoveUserPhoneRequest.Validate if the designated constraints aren't met.
type RemoveUserPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPhoneRequestValidationError) ErrorName() string {
	return "RemoveUserPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPhoneRequestValidationError{}

// Validate checks the field values on GetAllUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserPhoneRequestMultiError, or nil if none found.
func (m *GetAllUserPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := GetAllUserPhoneRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllUserPhoneRequestMultiError(errors)
	}

	return nil
}

// GetAllUserPhoneRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllUserPhoneRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllUserPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserPhoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserPhoneRequestMultiError) AllErrors() []error { return m }

// GetAllUserPhoneRequestValidationError is the validation error returned by
// GetAllUserPhoneRequest.Validate if the designated constraints aren't met.
type GetAllUserPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserPhoneRequestValidationError) ErrorName() string {
	return "GetAllUserPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserPhoneRequestValidationError{}

// Validate checks the field values on GetAllUserPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserPhoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserPhoneResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserPhoneResponseMultiError, or nil if none found.
func (m *GetAllUserPhoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserPhoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUserPhoneResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUserPhoneResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUserPhoneResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUserPhoneResponseMultiError(errors)
	}

	return nil
}

// GetAllUserPhoneResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUserPhoneResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllUserPhoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserPhoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserPhoneResponseMultiError) AllErrors() []error { return m }

// GetAllUserPhoneResponseValidationError is the validation error returned by
// GetAllUserPhoneResponse.Validate if the designated constraints aren't met.
type GetAllUserPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserPhoneResponseValidationError) ErrorName() string {
	return "GetAllUserPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserPhoneResponseValidationError{}
