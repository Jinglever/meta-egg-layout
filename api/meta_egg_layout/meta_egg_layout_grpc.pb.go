//
// Generated by meta-egg.
// WILL NOT be replace after re-generated. CAREFULLY EDIT.
// Version: master-6b8e050-dirty
// Author: meta-egg
// Generated at: 2023-04-12 17:05

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: meta_egg_layout.proto

package meta_egg_layout

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const ()

// MetaEggLayoutClient is the client API for MetaEggLayout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaEggLayoutClient interface {
}

type metaEggLayoutClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaEggLayoutClient(cc grpc.ClientConnInterface) MetaEggLayoutClient {
	return &metaEggLayoutClient{cc}
}

// MetaEggLayoutServer is the server API for MetaEggLayout service.
// All implementations must embed UnimplementedMetaEggLayoutServer
// for forward compatibility
type MetaEggLayoutServer interface {
	mustEmbedUnimplementedMetaEggLayoutServer()
}

// UnimplementedMetaEggLayoutServer must be embedded to have forward compatible implementations.
type UnimplementedMetaEggLayoutServer struct {
}

func (UnimplementedMetaEggLayoutServer) mustEmbedUnimplementedMetaEggLayoutServer() {}

// UnsafeMetaEggLayoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaEggLayoutServer will
// result in compilation errors.
type UnsafeMetaEggLayoutServer interface {
	mustEmbedUnimplementedMetaEggLayoutServer()
}

func RegisterMetaEggLayoutServer(s grpc.ServiceRegistrar, srv MetaEggLayoutServer) {
	s.RegisterService(&MetaEggLayout_ServiceDesc, srv)
}

// MetaEggLayout_ServiceDesc is the grpc.ServiceDesc for MetaEggLayout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaEggLayout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metaegglayout.MetaEggLayout",
	HandlerType: (*MetaEggLayoutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "meta_egg_layout.proto",
}
