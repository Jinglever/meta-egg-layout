// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v2.1.4-IE
// Author: meta-egg
// Generated at: 2023-12-01 20:24

package main

import (
	"flag"
	"os"
	"os/signal"
	"syscall"

	"meta-egg-layout/internal/common/resource"
	"meta-egg-layout/internal/config"
	grpcserver "meta-egg-layout/internal/server/grpc"
	httpserver "meta-egg-layout/internal/server/http"
	"meta-egg-layout/internal/server/monitor"
	log "meta-egg-layout/pkg/log"
	"meta-egg-layout/pkg/version"

	"github.com/gin-gonic/gin"
)

var (
	configFilePath = flag.String("config", "./configs/meta-egg-layout.yml", "config file")
)

func main() {
	flag.Parse()
	if *version.PrintVersion {
		version.Printer()
		return
	}

	// load config
	if err := config.LoadConfig(*configFilePath); err != nil {
		log.Fatalf("load config error %v", err)
	}

	// init log
	log.SetLevel(config.GetLogConfig().Level)

	// init resource
	rsrc, err := resource.InitResource(config.GetResourceConfig())
	if err != nil {
		log.Fatalf("init resource error %v", err)
	}

	// run http server
	gin.SetMode(gin.ReleaseMode)
	httpCancel := httpserver.NewServer(config.GetHTTPServerConfig(), rsrc).Run()
	// run grpc server
	grpcCancel := grpcserver.NewServer(config.GetGRPCServerConfig(), rsrc).Run()

	// run monitor server
	if config.GetMonitorServerConfig() != nil && config.GetMonitorServerConfig().Address != "" {
		monitorCancel := monitor.NewServer(config.GetMonitorServerConfig()).Run()
		defer monitorCancel()
	}

	sc := make(chan os.Signal, 1)
	signal.Notify(sc, os.Interrupt, syscall.SIGTERM)
	<-sc
	httpCancel()
	grpcCancel()
	rsrc.Release()
	log.Info("meta-egg-layout exit")
}
