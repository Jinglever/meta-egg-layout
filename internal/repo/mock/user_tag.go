// Code generated by MockGen. DO NOT EDIT.
// Source: meta-egg-layout/internal/repo (interfaces: UserTagRepo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "meta-egg-layout/gen/model"
	option "meta-egg-layout/internal/repo/option"
	gormx "meta-egg-layout/pkg/gormx"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserTagRepo is a mock of UserTagRepo interface.
type MockUserTagRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserTagRepoMockRecorder
}

// MockUserTagRepoMockRecorder is the mock recorder for MockUserTagRepo.
type MockUserTagRepoMockRecorder struct {
	mock *MockUserTagRepo
}

// NewMockUserTagRepo creates a new mock instance.
func NewMockUserTagRepo(ctrl *gomock.Controller) *MockUserTagRepo {
	mock := &MockUserTagRepo{ctrl: ctrl}
	mock.recorder = &MockUserTagRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTagRepo) EXPECT() *MockUserTagRepoMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockUserTagRepo) Bind(arg0 context.Context, arg1, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockUserTagRepoMockRecorder) Bind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockUserTagRepo)(nil).Bind), arg0, arg1, arg2)
}

// BindBatch mocks base method.
func (m *MockUserTagRepo) BindBatch(arg0 context.Context, arg1, arg2 []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindBatch indicates an expected call of BindBatch.
func (mr *MockUserTagRepoMockRecorder) BindBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBatch", reflect.TypeOf((*MockUserTagRepo)(nil).BindBatch), arg0, arg1, arg2)
}

// Count mocks base method.
func (m *MockUserTagRepo) Count(arg0 context.Context, arg1 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserTagRepoMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserTagRepo)(nil).Count), varargs...)
}

// Create mocks base method.
func (m *MockUserTagRepo) Create(arg0 context.Context, arg1 *model.UserTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserTagRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserTagRepo)(nil).Create), arg0, arg1)
}

// CreateBatch mocks base method.
func (m *MockUserTagRepo) CreateBatch(arg0 context.Context, arg1 []*model.UserTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockUserTagRepoMockRecorder) CreateBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockUserTagRepo)(nil).CreateBatch), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserTagRepo) Delete(arg0 context.Context, arg1 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserTagRepoMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserTagRepo)(nil).Delete), varargs...)
}

// DeleteByID mocks base method.
func (m *MockUserTagRepo) DeleteByID(arg0 context.Context, arg1 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserTagRepoMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserTagRepo)(nil).DeleteByID), arg0, arg1)
}

// DeleteByIDs mocks base method.
func (m *MockUserTagRepo) DeleteByIDs(arg0 context.Context, arg1 []uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockUserTagRepoMockRecorder) DeleteByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockUserTagRepo)(nil).DeleteByIDs), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserTagRepo) GetByID(arg0 context.Context, arg1 uint64, arg2 ...gormx.Option) (*model.UserTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*model.UserTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserTagRepoMockRecorder) GetByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserTagRepo)(nil).GetByID), varargs...)
}

// GetByIDs mocks base method.
func (m *MockUserTagRepo) GetByIDs(arg0 context.Context, arg1 []uint64, arg2 ...gormx.Option) ([]*model.UserTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]*model.UserTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockUserTagRepoMockRecorder) GetByIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockUserTagRepo)(nil).GetByIDs), varargs...)
}

// GetTX mocks base method.
func (m *MockUserTagRepo) GetTX(arg0 context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTX", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTX indicates an expected call of GetTX.
func (mr *MockUserTagRepoMockRecorder) GetTX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTX", reflect.TypeOf((*MockUserTagRepo)(nil).GetTX), arg0)
}

// GetTagListByUserID mocks base method.
func (m *MockUserTagRepo) GetTagListByUserID(arg0 context.Context, arg1 uint64, arg2 *option.TagListOption) ([]*model.Tag, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagListByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTagListByUserID indicates an expected call of GetTagListByUserID.
func (mr *MockUserTagRepoMockRecorder) GetTagListByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagListByUserID", reflect.TypeOf((*MockUserTagRepo)(nil).GetTagListByUserID), arg0, arg1, arg2)
}

// GetUserListByTagID mocks base method.
func (m *MockUserTagRepo) GetUserListByTagID(arg0 context.Context, arg1 uint64, arg2 *option.UserListOption) ([]*model.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListByTagID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserListByTagID indicates an expected call of GetUserListByTagID.
func (mr *MockUserTagRepoMockRecorder) GetUserListByTagID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListByTagID", reflect.TypeOf((*MockUserTagRepo)(nil).GetUserListByTagID), arg0, arg1, arg2)
}

// Gets mocks base method.
func (m *MockUserTagRepo) Gets(arg0 context.Context, arg1 ...gormx.Option) ([]*model.UserTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gets", varargs...)
	ret0, _ := ret[0].([]*model.UserTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockUserTagRepoMockRecorder) Gets(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockUserTagRepo)(nil).Gets), varargs...)
}

// Unbind mocks base method.
func (m *MockUserTagRepo) Unbind(arg0 context.Context, arg1, arg2 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unbind indicates an expected call of Unbind.
func (mr *MockUserTagRepoMockRecorder) Unbind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockUserTagRepo)(nil).Unbind), arg0, arg1, arg2)
}

// UnbindAllFromTag mocks base method.
func (m *MockUserTagRepo) UnbindAllFromTag(arg0 context.Context, arg1 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindAllFromTag", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindAllFromTag indicates an expected call of UnbindAllFromTag.
func (mr *MockUserTagRepoMockRecorder) UnbindAllFromTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindAllFromTag", reflect.TypeOf((*MockUserTagRepo)(nil).UnbindAllFromTag), arg0, arg1)
}

// UnbindAllFromUser mocks base method.
func (m *MockUserTagRepo) UnbindAllFromUser(arg0 context.Context, arg1 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindAllFromUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindAllFromUser indicates an expected call of UnbindAllFromUser.
func (mr *MockUserTagRepoMockRecorder) UnbindAllFromUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindAllFromUser", reflect.TypeOf((*MockUserTagRepo)(nil).UnbindAllFromUser), arg0, arg1)
}

// UnbindBatchFromTag mocks base method.
func (m *MockUserTagRepo) UnbindBatchFromTag(arg0 context.Context, arg1 uint64, arg2 []uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindBatchFromTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindBatchFromTag indicates an expected call of UnbindBatchFromTag.
func (mr *MockUserTagRepoMockRecorder) UnbindBatchFromTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindBatchFromTag", reflect.TypeOf((*MockUserTagRepo)(nil).UnbindBatchFromTag), arg0, arg1, arg2)
}

// UnbindBatchFromUser mocks base method.
func (m *MockUserTagRepo) UnbindBatchFromUser(arg0 context.Context, arg1 uint64, arg2 []uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindBatchFromUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindBatchFromUser indicates an expected call of UnbindBatchFromUser.
func (mr *MockUserTagRepoMockRecorder) UnbindBatchFromUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindBatchFromUser", reflect.TypeOf((*MockUserTagRepo)(nil).UnbindBatchFromUser), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockUserTagRepo) Update(arg0 context.Context, arg1, arg2 map[string]interface{}, arg3 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserTagRepoMockRecorder) Update(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserTagRepo)(nil).Update), varargs...)
}

// UpdateByID mocks base method.
func (m *MockUserTagRepo) UpdateByID(arg0 context.Context, arg1 uint64, arg2, arg3 map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserTagRepoMockRecorder) UpdateByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserTagRepo)(nil).UpdateByID), arg0, arg1, arg2, arg3)
}

// UpdateByIDs mocks base method.
func (m *MockUserTagRepo) UpdateByIDs(arg0 context.Context, arg1 []uint64, arg2, arg3 map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByIDs indicates an expected call of UpdateByIDs.
func (mr *MockUserTagRepoMockRecorder) UpdateByIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByIDs", reflect.TypeOf((*MockUserTagRepo)(nil).UpdateByIDs), arg0, arg1, arg2, arg3)
}
