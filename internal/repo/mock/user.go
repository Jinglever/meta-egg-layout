// Code generated by MockGen. DO NOT EDIT.
// Source: meta-egg-layout/internal/repo (interfaces: UserRepo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "meta-egg-layout/gen/model"
	option "meta-egg-layout/internal/repo/option"
	gormx "meta-egg-layout/pkg/gormx"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUserPhone mocks base method.
func (m *MockUserRepo) AddUserPhone(arg0 context.Context, arg1 uint64, arg2 *model.UserPhone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserPhone indicates an expected call of AddUserPhone.
func (mr *MockUserRepoMockRecorder) AddUserPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPhone", reflect.TypeOf((*MockUserRepo)(nil).AddUserPhone), arg0, arg1, arg2)
}

// Count mocks base method.
func (m *MockUserRepo) Count(arg0 context.Context, arg1 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserRepoMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserRepo)(nil).Count), varargs...)
}

// Create mocks base method.
func (m *MockUserRepo) Create(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), arg0, arg1)
}

// CreateBatch mocks base method.
func (m *MockUserRepo) CreateBatch(arg0 context.Context, arg1 []*model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockUserRepoMockRecorder) CreateBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockUserRepo)(nil).CreateBatch), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserRepo) Delete(arg0 context.Context, arg1 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepoMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepo)(nil).Delete), varargs...)
}

// DeleteByID mocks base method.
func (m *MockUserRepo) DeleteByID(arg0 context.Context, arg1 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserRepoMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRepo)(nil).DeleteByID), arg0, arg1)
}

// DeleteByIDs mocks base method.
func (m *MockUserRepo) DeleteByIDs(arg0 context.Context, arg1 []uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockUserRepoMockRecorder) DeleteByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockUserRepo)(nil).DeleteByIDs), arg0, arg1)
}

// GetAllUserPhone mocks base method.
func (m *MockUserRepo) GetAllUserPhone(arg0 context.Context, arg1 uint64) ([]*model.UserPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserPhone", arg0, arg1)
	ret0, _ := ret[0].([]*model.UserPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserPhone indicates an expected call of GetAllUserPhone.
func (mr *MockUserRepoMockRecorder) GetAllUserPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserPhone", reflect.TypeOf((*MockUserRepo)(nil).GetAllUserPhone), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserRepo) GetByID(arg0 context.Context, arg1 uint64, arg2 ...gormx.Option) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepoMockRecorder) GetByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepo)(nil).GetByID), varargs...)
}

// GetByIDs mocks base method.
func (m *MockUserRepo) GetByIDs(arg0 context.Context, arg1 []uint64, arg2 ...gormx.Option) ([]*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockUserRepoMockRecorder) GetByIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockUserRepo)(nil).GetByIDs), varargs...)
}

// GetList mocks base method.
func (m *MockUserRepo) GetList(arg0 context.Context, arg1 *option.UserListOption) ([]*model.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockUserRepoMockRecorder) GetList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockUserRepo)(nil).GetList), arg0, arg1)
}

// GetTX mocks base method.
func (m *MockUserRepo) GetTX(arg0 context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTX", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTX indicates an expected call of GetTX.
func (mr *MockUserRepoMockRecorder) GetTX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTX", reflect.TypeOf((*MockUserRepo)(nil).GetTX), arg0)
}

// Gets mocks base method.
func (m *MockUserRepo) Gets(arg0 context.Context, arg1 ...gormx.Option) ([]*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gets", varargs...)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockUserRepoMockRecorder) Gets(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockUserRepo)(nil).Gets), varargs...)
}

// RemoveAllUserPhone mocks base method.
func (m *MockUserRepo) RemoveAllUserPhone(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllUserPhone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllUserPhone indicates an expected call of RemoveAllUserPhone.
func (mr *MockUserRepoMockRecorder) RemoveAllUserPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllUserPhone", reflect.TypeOf((*MockUserRepo)(nil).RemoveAllUserPhone), arg0, arg1)
}

// RemoveUserPhone mocks base method.
func (m *MockUserRepo) RemoveUserPhone(arg0 context.Context, arg1, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserPhone indicates an expected call of RemoveUserPhone.
func (mr *MockUserRepoMockRecorder) RemoveUserPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPhone", reflect.TypeOf((*MockUserRepo)(nil).RemoveUserPhone), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockUserRepo) Update(arg0 context.Context, arg1, arg2 map[string]interface{}, arg3 ...gormx.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoMockRecorder) Update(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepo)(nil).Update), varargs...)
}

// UpdateByID mocks base method.
func (m *MockUserRepo) UpdateByID(arg0 context.Context, arg1 uint64, arg2, arg3 map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserRepoMockRecorder) UpdateByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserRepo)(nil).UpdateByID), arg0, arg1, arg2, arg3)
}

// UpdateByIDs mocks base method.
func (m *MockUserRepo) UpdateByIDs(arg0 context.Context, arg1 []uint64, arg2, arg3 map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByIDs indicates an expected call of UpdateByIDs.
func (mr *MockUserRepoMockRecorder) UpdateByIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByIDs", reflect.TypeOf((*MockUserRepo)(nil).UpdateByIDs), arg0, arg1, arg2, arg3)
}
