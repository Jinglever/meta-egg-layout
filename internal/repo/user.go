// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.9.0-CE
// Author: meta-egg
// Generated at: 2023-09-12 19:27

package repo

import (
	"context"
	"meta-egg-layout/gen/model"
	gen "meta-egg-layout/gen/repo"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/common/resource"
	"meta-egg-layout/internal/repo/option"
	"meta-egg-layout/pkg/gormx"

	jgstr "github.com/Jinglever/go-string"
)

//go:generate mockgen -package mock -destination ./mock/user.go . UserRepo
type UserRepo interface {
	gen.UserRepo

	GetList(ctx context.Context, opt *option.UserListOption) ([]*model.User, int64, error)
}

type UserRepoImpl struct {
	gen.UserRepoImpl
}

func NewUserRepo(rsrc *resource.Resource) UserRepo {
	return &UserRepoImpl{
		UserRepoImpl: gen.UserRepoImpl{
			Resource: rsrc,
		},
	}
}

func (r *UserRepoImpl) GetList(ctx context.Context, opt *option.UserListOption) ([]*model.User, int64, error) {
	log := contexts.GetLogger(ctx).
		WithField("opt", jgstr.JsonEncode(opt))
	ops := make([]gormx.Option, 0)
	if opt.Filter != nil {
		ops = append(ops, opt.Filter.GetRepoOptions()...)
	}
	if opt.Order != nil {
		validOrderby := []string{
			model.ColUserID,
		}
		ops = append(ops, opt.Order.GetRepoOptions(validOrderby)...)
	}
	total, err := r.Count(ctx, ops...)
	if err != nil {
		log.WithError(err).Error("fail to count user list")
		return nil, 0, err
	}
	if total == 0 {
		return make([]*model.User, 0), 0, nil
	}
	if opt.Pagination != nil {
		ops = append(ops, opt.Pagination.GetRepoOptions()...)
	}
	if len(opt.Select) > 0 {
		ops = append(ops, gormx.Select(opt.Select...))
	}
	ms, err := r.Gets(ctx, ops...)
	if err != nil {
		log.WithError(err).Error("fail to get user list")
		return nil, 0, err
	}
	return ms, total, nil
}
