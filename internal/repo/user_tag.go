// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.0
// Author: meta-egg
// Generated at: 2025-08-24 21:54

package repo

import (
	"context"
	"meta-egg-layout/gen/model"
	gen "meta-egg-layout/gen/repo"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/common/resource"
	"meta-egg-layout/internal/repo/option"
	"meta-egg-layout/pkg/gormx"

	jgstr "github.com/Jinglever/go-string"
)

//go:generate mockgen -package mock -destination ./mock/user_tag.go . UserTagRepo
type UserTagRepo interface {
	gen.UserTagRepo

	GetTagListByUserID(ctx context.Context, userId uint64, opt *option.TagListOption) ([]*model.Tag, int64, error)
	GetUserListByTagID(ctx context.Context, tagId uint64, opt *option.UserListOption) ([]*model.User, int64, error)
}

type UserTagRepoImpl struct {
	gen.UserTagRepoImpl
}

func NewUserTagRepo(rsrc *resource.Resource) UserTagRepo {
	return &UserTagRepoImpl{
		UserTagRepoImpl: gen.UserTagRepoImpl{
			Resource: rsrc,
		},
	}
}

func (r *UserTagRepoImpl) GetTagListByUserID(ctx context.Context, userId uint64, opt *option.TagListOption) ([]*model.Tag, int64, error) {
	log := contexts.GetLogger(ctx).
		WithField("userId", userId).
		WithField("opt", jgstr.JsonEncode(opt))

	// 构建gormx选项数组
	opts := make([]gormx.Option, 0)

	// 添加JOIN和WHERE条件
	tagTableName := (&model.Tag{}).TableName()
	userTagTableName := (&model.UserTag{}).TableName()

	// 添加INNER JOIN
	joinSQL := "INNER JOIN " + userTagTableName + " ON " + userTagTableName + "." + model.ColUserTagTagID + " = " + tagTableName + "." + model.ColTagID
	opts = append(opts, gormx.Join(joinSQL))

	// 添加WHERE条件
	whereSQL := userTagTableName + "." + model.ColUserTagUserID + " = ?"
	opts = append(opts, gormx.Where(whereSQL, userId))

	// 处理Filter选项
	if opt != nil && opt.Filter != nil {
		filterOpts := opt.Filter.GetRepoOptions()
		opts = append(opts, filterOpts...)
	}

	// 处理Order选项
	if opt != nil && opt.Order != nil {
		validOrderby := []string{
			tagTableName + "." + model.ColTagID,
		}
		orderOpts := opt.Order.GetRepoOptions(validOrderby)
		opts = append(opts, orderOpts...)
	}

	// 先计算总数（不包含分页和Select）
	var total int64
	tx := r.GetTX(ctx).Model(&model.Tag{})
	for _, option := range opts {
		tx = option(tx)
	}
	result := tx.Count(&total)
	if result.Error != nil {
		log.WithError(result.Error).Error("fail to count related tag list")
		return nil, 0, result.Error
	}
	if total == 0 {
		return make([]*model.Tag, 0), 0, nil
	}

	// 处理Pagination选项
	if opt != nil && opt.Pagination != nil {
		paginationOpts := opt.Pagination.GetRepoOptions()
		opts = append(opts, paginationOpts...)
	}

	// 处理Select选项（补全表名前缀）
	if opt != nil && len(opt.Select) > 0 {
		selectFields := make([]interface{}, len(opt.Select))
		for i, field := range opt.Select {
			if fieldStr, ok := field.(string); ok {
				// 补全表名前缀
				selectFields[i] = tagTableName + "." + fieldStr
			} else {
				selectFields[i] = field
			}
		}
		opts = append(opts, gormx.Select(selectFields...))
	}

	// 执行查询，获取目标表数据
	var results []*model.Tag
	tx = r.GetTX(ctx)
	for _, option := range opts {
		tx = option(tx)
	}
	if err := tx.Find(&results).Error; err != nil {
		log.WithError(err).Error("fail to get related tag list")
		return nil, 0, err
	}

	return results, total, nil
}

func (r *UserTagRepoImpl) GetUserListByTagID(ctx context.Context, tagId uint64, opt *option.UserListOption) ([]*model.User, int64, error) {
	log := contexts.GetLogger(ctx).
		WithField("tagId", tagId).
		WithField("opt", jgstr.JsonEncode(opt))

	// 构建gormx选项数组
	opts := make([]gormx.Option, 0)

	// 添加JOIN和WHERE条件
	userTableName := (&model.User{}).TableName()
	userTagTableName := (&model.UserTag{}).TableName()

	// 添加INNER JOIN
	joinSQL := "INNER JOIN " + userTagTableName + " ON " + userTagTableName + "." + model.ColUserTagUserID + " = " + userTableName + "." + model.ColUserID
	opts = append(opts, gormx.Join(joinSQL))

	// 添加WHERE条件
	whereSQL := userTagTableName + "." + model.ColUserTagTagID + " = ?"
	opts = append(opts, gormx.Where(whereSQL, tagId))

	// 处理Filter选项
	if opt != nil && opt.Filter != nil {
		filterOpts := opt.Filter.GetRepoOptions()
		opts = append(opts, filterOpts...)
	}

	// 处理Order选项
	if opt != nil && opt.Order != nil {
		validOrderby := []string{
			userTableName + "." + model.ColUserID,
		}
		orderOpts := opt.Order.GetRepoOptions(validOrderby)
		opts = append(opts, orderOpts...)
	}

	// 先计算总数（不包含分页和Select）
	var total int64
	tx := r.GetTX(ctx).Model(&model.User{})
	for _, option := range opts {
		tx = option(tx)
	}
	result := tx.Count(&total)
	if result.Error != nil {
		log.WithError(result.Error).Error("fail to count related user list")
		return nil, 0, result.Error
	}
	if total == 0 {
		return make([]*model.User, 0), 0, nil
	}

	// 处理Pagination选项
	if opt != nil && opt.Pagination != nil {
		paginationOpts := opt.Pagination.GetRepoOptions()
		opts = append(opts, paginationOpts...)
	}

	// 处理Select选项（补全表名前缀）
	if opt != nil && len(opt.Select) > 0 {
		selectFields := make([]interface{}, len(opt.Select))
		for i, field := range opt.Select {
			if fieldStr, ok := field.(string); ok {
				// 补全表名前缀
				selectFields[i] = userTableName + "." + fieldStr
			} else {
				selectFields[i] = field
			}
		}
		opts = append(opts, gormx.Select(selectFields...))
	}

	// 执行查询，获取目标表数据
	var results []*model.User
	tx = r.GetTX(ctx)
	for _, option := range opts {
		tx = option(tx)
	}
	if err := tx.Find(&results).Error; err != nil {
		log.WithError(err).Error("fail to get related user list")
		return nil, 0, err
	}

	return results, total, nil
}
