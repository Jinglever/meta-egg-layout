// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.0.19-EE
// Author: meta-egg
// Generated at: 2023-04-27 11:37
package crud

import (
	"context"

	"meta-egg-layout/gen/model"
	ropt "meta-egg-layout/gen/repo/option"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/domain/option"

	log "github.com/sirupsen/logrus"
)

func (u *CrudUsecase) CreateUser(ctx context.Context, m *model.User) error {
	err := u.UserRepo.Create(ctx, m)
	if err != nil {
		log.Errorf("fail to create user: %v", err)
		return cerror.Internal("fail to create user")
	}
	return nil
}

func (u *CrudUsecase) GetUserByID(ctx context.Context, id uint64) (*model.User, error) {
	mUser, err := u.UserRepo.GetByID(ctx, id)
	if err != nil {
		log.Errorf("fail to get user by id: %v", err)
		return nil, cerror.NotFound("user not exist")
	}
	return mUser, nil
}

type UserFilterOption struct {
	Gender *uint64
}

func (o *UserFilterOption) GetRepoOptions() []ropt.Option {
	ops := make([]ropt.Option, 0)
	if o.Gender != nil {
		ops = append(ops, ropt.Where(model.ColUserGender+" = ?", *o.Gender))
	}

	return ops
}

type UserListOption struct {
	Pagination *option.PaginationOption
	Filter     *UserFilterOption
	Order      *option.OrderOption
	Select     []interface{} // select columns, such as []interface{}{"id", "name"}
}

func (u *CrudUsecase) GetUserList(ctx context.Context, opt *UserListOption) ([]*model.User, int64, error) {
	ops := make([]ropt.Option, 0)
	if opt.Filter != nil {
		ops = append(ops, opt.Filter.GetRepoOptions()...)
	}
	if opt.Order != nil {
		validOrderby := []string{
			model.ColUserID,
		}
		ops = append(ops, opt.Order.GetRepoOptions(validOrderby)...)
	}
	total, err := u.UserRepo.Count(ctx, ops...)
	if err != nil {
		log.Errorf("fail to count user list: %v", err)
		return nil, 0, cerror.Internal("fail to count user list")
	}
	if total == 0 {
		return make([]*model.User, 0), 0, nil
	}
	if opt.Pagination != nil {
		ops = append(ops, opt.Pagination.GetRepoOptions()...)
	}
	if len(opt.Select) > 0 {
		ops = append(ops, ropt.Select(opt.Select...))
	}
	mUserList, err := u.UserRepo.Gets(ctx, ops...)
	if err != nil {
		log.Errorf("fail to get user list: %v", err)
		return nil, 0, cerror.Internal("fail to get user list")
	}
	return mUserList, total, nil
}

type UserSetOption struct {
	Name   *string
	Gender *uint64
}

type UserUpdateOption struct {
	Set *UserSetOption
}

func (u *CrudUsecase) UpdateUser(ctx context.Context, id uint64, opt *UserUpdateOption) error {
	// assemble setCVs
	setCVs := make(map[string]interface{})
	if opt.Set != nil {
		if opt.Set.Name != nil {
			setCVs[model.ColUserName] = *opt.Set.Name
		}
		if opt.Set.Gender != nil {
			setCVs[model.ColUserGender] = *opt.Set.Gender
		}
	}

	_, err := u.UserRepo.UpdateByID(ctx, id, setCVs, nil)
	if err != nil {
		log.Errorf("fail to update user: %v", err)
		return cerror.Internal("fail to update user")
	}

	return nil
}
