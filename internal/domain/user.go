// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.0.8-EE
// Author: meta-egg
// Generated at: 2023-04-23 20:35
package domain

import (
	"context"

	"meta-egg-layout/gen/model"
	ropt "meta-egg-layout/gen/repo/option"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/domain/option"

	log "github.com/sirupsen/logrus"
)

func (u *DomainUsecase) CreateUser(ctx context.Context, m *model.User) error {
	err := u.UserRepo.Create(ctx, m)
	if err != nil {
		log.Errorf("fail to create user: %v", err)
		return cerror.Internal("fail to create user")
	}
	return nil
}

func (u *DomainUsecase) GetUserByID(ctx context.Context, id uint64) (*model.User, error) {
	mUser, err := u.UserRepo.GetByID(ctx, id)
	if err != nil {
		log.Errorf("fail to get user by id: %v", err)
		return nil, cerror.NotFound("user not exist")
	}
	return mUser, nil
}

type UserFilterOption struct {
	Gender *uint64
}

func (o *UserFilterOption) GetRepoOptions() []ropt.Option {
	ops := make([]ropt.Option, 0)
	if o.Gender != nil {
		ops = append(ops, ropt.Where(model.ColUserGender+" = ?", *o.Gender))
	}

	return ops
}

type UserListOption struct {
	Pagination *option.PaginationOption
	Filter     *UserFilterOption
	Order      *option.OrderOption
	Select     []interface{} // select columns, such as []interface{}{"id", "name"}
}

func (u *DomainUsecase) GetUserList(ctx context.Context, opt *UserListOption) ([]*model.User, int64, error) {
	ops := make([]ropt.Option, 0)
	if opt.Filter != nil {
		ops = append(ops, opt.Filter.GetRepoOptions()...)
	}
	if opt.Order != nil {
		validOrderby := []string{
			model.ColUserID,
		}
		ops = append(ops, opt.Order.GetRepoOptions(validOrderby)...)
	}
	total, err := u.UserRepo.Count(ctx, ops...)
	if err != nil {
		return nil, 0, cerror.Internal("fail to count user list")
	}
	if total == 0 {
		return make([]*model.User, 0), 0, nil
	}
	if opt.Pagination != nil {
		ops = append(ops, opt.Pagination.GetRepoOptions()...)
	}
	if len(opt.Select) > 0 {
		ops = append(ops, ropt.Select(opt.Select...))
	}
	mUserList, err := u.UserRepo.Gets(ctx, ops...)
	if err != nil {
		return nil, 0, cerror.Internal("fail to get user list")
	}
	return mUserList, total, nil
}
