// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.0
// Author: meta-egg
// Generated at: 2025-08-24 21:54

package biz

import (
	"context"

	"errors"
	"meta-egg-layout/gen/model"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"

	"gorm.io/gorm"

	jgstr "github.com/Jinglever/go-string"
)

type TagBO struct {
	ID   uint64 `json:"id"`   //
	Name string `json:"name"` // 标签名称
}

func (b *BizService) ToTagBO(ctx context.Context, m *model.Tag) (*TagBO, error) {
	return &TagBO{
		ID:   m.ID,
		Name: m.Name,
	}, nil
}

func (b *BizService) CreateTag(ctx context.Context, obj *TagBO) error {
	log := contexts.GetLogger(ctx).
		WithField("obj", jgstr.JsonEncode(obj))
	m := &model.Tag{}
	return b.Resource.DB.Transaction(ctx, func(txCtx context.Context) error {
		err := b.TagRepo.Create(txCtx, m)
		if err != nil {
			log.WithError(err).Error("fail to create tag")
			return cerror.Internal(err.Error())
		}

		bo, err := b.ToTagBO(txCtx, m)
		if err != nil {
			log.WithError(err).Error("fail to convert tag model to TagBO")
			return cerror.Internal(err.Error())
		}
		*obj = *bo
		return nil
	})
}

func (b *BizService) GetTagByID(ctx context.Context, id uint64) (*TagBO, error) {
	log := contexts.GetLogger(ctx).
		WithField("id", id)
	mTag, err := b.TagRepo.GetByID(ctx, id)
	if err != nil {
		log.WithError(err).Error("fail to get tag by id")
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, cerror.NotFound(err.Error())
		} else {
			return nil, cerror.Internal(err.Error())
		}
	}
	tagBO, err := b.ToTagBO(ctx, mTag)
	if err != nil {
		log.WithError(err).Error("fail to convert tag model to TagBO")
		return nil, cerror.Internal(err.Error())
	}
	return tagBO, nil
}

type TagListBO struct {
	ID   uint64 `json:"id"`   //
	Name string `json:"name"` // 标签名称
}

func (b *BizService) ToTagListBO(ctx context.Context, ms []*model.Tag) ([]*TagListBO, error) {
	list := make([]*TagListBO, 0, len(ms))
	for i := range ms {
		list = append(list, &TagListBO{
			ID:   ms[i].ID,
			Name: ms[i].Name,
		})
	}
	return list, nil
}

type TagFilterOption struct {
}

type TagListOption struct {
	Pagination *option.PaginationOption
	Order      *option.OrderOption
	Filter     *TagFilterOption
}

func (b *BizService) GetTagList(ctx context.Context, opt *TagListOption) ([]*TagListBO, int64, error) {
	log := contexts.GetLogger(ctx).
		WithField("opt", jgstr.JsonEncode(opt))
	msTag, total, err := b.TagRepo.GetList(ctx, &option.TagListOption{
		Pagination: opt.Pagination,
		Order:      opt.Order,
		Select: []interface{}{
			model.ColTagID,
			model.ColTagName,
		},
	})
	if err != nil {
		log.WithError(err).Error("fail to get tag list")
		return nil, 0, cerror.Internal(err.Error())
	}
	list, err := b.ToTagListBO(ctx, msTag)
	if err != nil {
		log.WithError(err).Error("fail to convert tag model to TagListBO")
		return nil, 0, cerror.Internal(err.Error())
	}
	return list, total, nil
}

type TagSetOption struct {
}

func (b *BizService) UpdateTagByID(ctx context.Context, id uint64, setOpt *TagSetOption) error {
	log := contexts.GetLogger(ctx).
		WithField("id", id).
		WithField("setOpt", jgstr.JsonEncode(setOpt))
	// assemble setCVs
	setCVs := make(map[string]interface{})

	if len(setCVs) == 0 {
		return nil
	}
	_, err := b.TagRepo.UpdateByID(ctx, id, setCVs, nil)
	if err != nil {
		log.WithError(err).Error("fail to update tag")
		return cerror.Internal(err.Error())
	}
	return nil
}

func (b *BizService) DeleteTagByID(ctx context.Context, id uint64) error {
	log := contexts.GetLogger(ctx).
		WithField("id", id)
	return b.Resource.DB.Transaction(ctx, func(txCtx context.Context) error {
		var err error

		// 级联解绑用户标签关系关系
		_, err = b.UserTagRepo.UnbindAllFromTag(txCtx, id)
		if err != nil {
			log.WithError(err).Error("fail to unbind all user_tag relationships")
			return cerror.Internal(err.Error())
		}
		_, err = b.TagRepo.DeleteByID(txCtx, id)
		if err != nil {
			log.WithError(err).Error("fail to delete tag")
			return cerror.Internal(err.Error())
		}
		return nil
	})
}
