// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.5.1-EE
// Author: meta-egg
// Generated at: 2023-05-22 16:28

package biz

import (
	"context"

	"errors"
	"meta-egg-layout/gen/model"
	"meta-egg-layout/internal/biz/option"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/pkg/gormx"

	"gorm.io/gorm"
)

func (u *BizService) CreateUser(ctx context.Context, m *model.User) error {
	log := contexts.GetLogger(ctx)
	err := u.UserRepo.Create(ctx, m)
	if err != nil {
		log.WithError(err).Error("fail to create user")
		return cerror.Internal()
	}
	return nil
}

func (u *BizService) GetUserByID(ctx context.Context, id uint64) (*model.User, error) {
	log := contexts.GetLogger(ctx)
	mUser, err := u.UserRepo.GetByID(ctx, id)
	if err != nil {
		log.WithError(err).Error("fail to get user by id")
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, cerror.NotFound("user not exist")
		} else {
			return nil, cerror.Internal()
		}
	}
	return mUser, nil
}

type UserFilterOption struct {
	Gender  *uint64
	IsOnJob *bool
}

func (o *UserFilterOption) GetRepoOptions() []gormx.Option {
	ops := make([]gormx.Option, 0)
	if o.Gender != nil {
		ops = append(ops, gormx.Where(model.ColUserGender+" = ?", *o.Gender))
	}
	if o.IsOnJob != nil {
		ops = append(ops, gormx.Where(model.ColUserIsOnJob+" = ?", *o.IsOnJob))
	}

	return ops
}

type UserListOption struct {
	Pagination *option.PaginationOption
	Filter     *UserFilterOption
	Order      *option.OrderOption
	Select     []interface{} // select columns, such as []interface{}{"id", "name"}
}

func (u *BizService) GetUserList(ctx context.Context, opt *UserListOption) ([]*model.User, int64, error) {
	log := contexts.GetLogger(ctx)
	ops := make([]gormx.Option, 0)
	if opt.Filter != nil {
		ops = append(ops, opt.Filter.GetRepoOptions()...)
	}
	if opt.Order != nil {
		validOrderby := []string{
			model.ColUserID,
		}
		ops = append(ops, opt.Order.GetRepoOptions(validOrderby)...)
	}
	total, err := u.UserRepo.Count(ctx, ops...)
	if err != nil {
		log.WithError(err).Error("fail to count user list")
		return nil, 0, cerror.Internal()
	}
	if total == 0 {
		return make([]*model.User, 0), 0, nil
	}
	if opt.Pagination != nil {
		ops = append(ops, opt.Pagination.GetRepoOptions()...)
	}
	if len(opt.Select) > 0 {
		ops = append(ops, gormx.Select(opt.Select...))
	}
	mUserList, err := u.UserRepo.Gets(ctx, ops...)
	if err != nil {
		log.WithError(err).Error("fail to get user list")
		return nil, 0, cerror.Internal()
	}
	return mUserList, total, nil
}

type UserSetOption struct {
	Name    *string
	Gender  *uint64
	Age     *uint8
	IsOnJob *bool
}

type UserUpdateOption struct {
	Set *UserSetOption
}

func (u *BizService) UpdateUserByID(ctx context.Context, id uint64, opt *UserUpdateOption) error {
	log := contexts.GetLogger(ctx)
	// assemble setCVs
	setCVs := make(map[string]interface{})
	if opt.Set != nil {
		if opt.Set.Name != nil {
			setCVs[model.ColUserName] = *opt.Set.Name
		}
		if opt.Set.Gender != nil {
			setCVs[model.ColUserGender] = *opt.Set.Gender
		}
		if opt.Set.Age != nil {
			setCVs[model.ColUserAge] = *opt.Set.Age
		}
		if opt.Set.IsOnJob != nil {
			setCVs[model.ColUserIsOnJob] = *opt.Set.IsOnJob
		}
	}

	_, err := u.UserRepo.UpdateByID(ctx, id, setCVs, nil)
	if err != nil {
		log.WithError(err).Error("fail to update user")
		return cerror.Internal()
	}

	return nil
}

func (u *BizService) DeleteUserByID(ctx context.Context, id uint64) error {
	log := contexts.GetLogger(ctx)
	_, err := u.UserRepo.DeleteByID(ctx, id)
	if err != nil {
		log.WithError(err).Error("fail to delete user")
		return cerror.Internal()
	}
	return nil
}
