// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.1.0-EE
// Author: meta-egg
// Generated at: 2023-04-27 19:17

package resource

import (
	"context"

	"meta-egg-layout/pkg/gormx"

	jgjwt "github.com/Jinglever/go-jwt"
	log "github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

type Resource struct {
	cancelFuncs []context.CancelFunc
	DB          *gorm.DB
	JWT         *jgjwt.JWT
}

type Config struct {
	DB  *gormx.Config `mapstructure:"db"`  // 数据库配置
	JWT *jgjwt.Config `mapstructure:"jwt"` // jwt配置
}

func InitResource(cfg *Config) (*Resource, error) {
	rsrc := &Resource{
		cancelFuncs: make([]context.CancelFunc, 0),
	}

	db, err := gormx.ConnectDB(cfg.DB)
	if err != nil {
		log.Errorf("connect db failed, err: %v", err)
		return nil, err
	}
	rsrc.DB = db
	rsrc.cancelFuncs = append(rsrc.cancelFuncs, func() {
		sqlDB, err := rsrc.DB.DB()
		if err == nil {
			err = sqlDB.Close()
			if err != nil {
				log.Errorf("close db error: %v", err)
			}
			log.Info("close db success")
		}
	})

	jwt, err := jgjwt.NewJWT(cfg.JWT)
	if err != nil {
		log.Errorf("init jwt failed, err: %v", err)
		return nil, err
	}
	rsrc.JWT = jwt

	// your resource init here

	return rsrc, nil
}

func (r *Resource) Release() {
	for _, cancel := range r.cancelFuncs {
		cancel()
	}
}
