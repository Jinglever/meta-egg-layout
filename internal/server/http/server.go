/*
 * Generated by meta-egg.
 * WILL NOT be replace after re-generated. CAREFULLY EDIT.
 * Version: v0.9.0-96bf0e0
 * Author: meta-egg
 * Generated at: 2023-04-13 09:27
 */
package server

import (
	"context"
	"net/http"
	"time"

	"meta-egg-layout/internal/common/resource"

	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

// ProviderSet is http server providers.
var ProviderSet = wire.NewSet(
	NewServer,
)

type Config struct {
	Address           string        `mapstructure:"address"`
	ReadHeaderTimeout time.Duration `mapstructure:"read_header_timeout"`
}

type Server struct {
	Cfg      *Config
	Resource *resource.Resource
	Router   *gin.Engine
}

func NewServer(cfg *Config, rsrc *resource.Resource) *Server {
	s := &Server{
		Cfg:      cfg,
		Resource: rsrc,
	}
	s.initRouter()
	return s
}

func (s *Server) Run() context.CancelFunc {
	httpServer := &http.Server{
		Addr:        s.Cfg.Address,
		Handler:     s.Router,
		ReadTimeout: s.Cfg.ReadHeaderTimeout,
	}
	go func() {
		logrus.Info("http server start at ", s.Cfg.Address)
		err := httpServer.ListenAndServe()
		if err != http.ErrServerClosed {
			logrus.Fatalf("http server error %v, want %v", err, http.ErrServerClosed)
		}
	}()

	cancel := func() {
		logrus.Info("http server stop")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		if err := httpServer.Shutdown(ctx); err != nil {
			logrus.Fatalf("http server shutdown error %v", err)
		}
	}
	return cancel
}
