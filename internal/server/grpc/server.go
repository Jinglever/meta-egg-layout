/*
 * Generated by meta-egg.
 * WILL NOT be replace after re-generated. CAREFULLY EDIT.
 * Version: v0.9.0-96bf0e0
 * Author: meta-egg
 * Generated at: 2023-04-13 09:27
 */
package server

import (
	"context"
	"net"

	api "meta-egg-layout/api/meta_egg_layout"
	"meta-egg-layout/internal/common/resource"

	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
)

// ProviderSet is grpc server providers.
var ProviderSet = wire.NewSet(
	NewServer,
)

type Config struct {
	Address string `mapstructure:"address"`
}

type Server struct {
	Cfg      *Config
	Resource *resource.Resource
	Router   *gin.Engine
}

func NewServer(cfg *Config, rsrc *resource.Resource) *Server {
	s := &Server{
		Cfg:      cfg,
		Resource: rsrc,
	}
	return s
}

func (s *Server) Run() context.CancelFunc {
	// listen
	lis, err := net.Listen("tcp", s.Cfg.Address)
	if err != nil {
		logrus.Fatalf("failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer(
		grpc.ChainUnaryInterceptor(
			errorInterceptor,
			authInterceptor,
		),
	)
	api.RegisterMetaEggLayoutServer(grpcServer, NewHandler(s.Resource))

	go func() {
		logrus.Infof("grpc server start at %s", s.Cfg.Address)
		err := grpcServer.Serve(lis)
		if err != nil {
			logrus.Fatalf("grpc server error %v, want %v", err, nil)
		}
	}()

	cancel := func() {
		logrus.Info("grpc server stop")
		grpcServer.GracefulStop()
	}
	return cancel
}
