// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.1.0-EE
// Author: meta-egg
// Generated at: 2023-04-27 19:17

package server

import (
	"context"
	"net"

	api "meta-egg-layout/api/meta_egg_layout"
	"meta-egg-layout/internal/common/resource"

	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	log "github.com/sirupsen/logrus"
	"google.golang.org/grpc"
)

// ProviderSet is grpc server providers.
var ProviderSet = wire.NewSet(
	NewServer,
)

type Config struct {
	Address   string `mapstructure:"address"`    // GRPC服务监听地址
	VerifyJWT bool   `mapstructure:"verify_jwt"` // 是否验证JWT签名, 为false时, 会仅解析JWT, 不会验证JWT签名
}

type Server struct {
	Cfg      *Config
	Resource *resource.Resource
	Router   *gin.Engine
}

func NewServer(cfg *Config, rsrc *resource.Resource) *Server {
	s := &Server{
		Cfg:      cfg,
		Resource: rsrc,
	}
	return s
}

func (s *Server) Run() context.CancelFunc {
	// listen
	lis, err := net.Listen("tcp", s.Cfg.Address)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer(
		grpc.ChainUnaryInterceptor(
			errorInterceptor(),
			authInterceptor(s.Resource.JWT, s.Cfg),
		),
	)
	api.RegisterMetaEggLayoutServer(grpcServer, NewHandler(s.Resource))

	go func() {
		log.Infof("grpc server start at %s", s.Cfg.Address)
		err := grpcServer.Serve(lis)
		if err != nil {
			log.Fatalf("grpc server error %v, want %v", err, nil)
		}
	}()

	cancel := func() {
		log.Info("grpc server stop")
		grpcServer.GracefulStop()
	}
	return cancel
}
