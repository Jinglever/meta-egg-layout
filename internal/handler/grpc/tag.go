// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.0
// Author: meta-egg
// Generated at: 2025-08-24 22:42

package handler

import (
	"context"
	api "meta-egg-layout/api/meta_egg_layout"
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"

	jgstr "github.com/Jinglever/go-string"
	"google.golang.org/protobuf/types/known/emptypb"
)

func (h *Handler) ToTagDetail(ctx context.Context,
	bo *biz.TagBO,
) (*api.TagDetail, error) {
	return &api.TagDetail{
		Id:   bo.ID,
		Name: bo.Name,
	}, nil
}

// 创建标签
func (h *Handler) CreateTag(ctx context.Context,
	req *api.CreateTagRequest,
) (*api.TagDetail, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	tagBO := &biz.TagBO{}
	err = h.BizService.CreateTag(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("BizService.CreateTag failed")
		return nil, err
	}
	d, err := h.ToTagDetail(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("convert TagBO to TagDetail failed")
		return nil, err
	}
	return d, nil
}

// 获取标签详情
func (h *Handler) GetTagDetail(ctx context.Context,
	req *api.GetTagDetailRequest,
) (*api.TagDetail, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	tagBO, err := h.BizService.GetTagByID(ctx, req.Id)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagByID failed")
		return nil, err
	}
	d, err := h.ToTagDetail(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("convert TagBO to TagDetail failed")
		return nil, err
	}
	return d, nil
}

func (h *Handler) ToTagListInfo(ctx context.Context,
	objs []*biz.TagListBO,
) ([]*api.TagListInfo, error) {
	list := make([]*api.TagListInfo, 0, len(objs))
	for i := range objs {
		list = append(list, &api.TagListInfo{
			Id:   objs[i].ID,
			Name: objs[i].Name,
		})
	}
	return list, nil
}

// 获取标签列表
func (h *Handler) GetTagList(ctx context.Context,
	req *api.GetTagListRequest,
) (*api.GetTagListResponse, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	opt := &biz.TagListOption{
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
	}
	if req.Pagination != nil {
		opt.Pagination = &option.PaginationOption{
			Page:     int(req.Pagination.Page),
			PageSize: int(req.Pagination.PageSize),
		}
	}
	tagBOs, total, err := h.BizService.GetTagList(ctx, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagList failed")
		return nil, err
	}
	list, err := h.ToTagListInfo(ctx, tagBOs)
	if err != nil {
		log.WithError(err).Error("convert TagListBO to TagListInfo failed")
		return nil, err
	}
	return &api.GetTagListResponse{
		List:  list,
		Total: total,
	}, nil
}

// 更新标签
func (h *Handler) UpdateTag(ctx context.Context,
	req *api.UpdateTagRequest,
) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	setOpt := &biz.TagSetOption{}
	err = h.BizService.UpdateTagByID(ctx, req.Id, setOpt)
	if err != nil {
		log.WithError(err).Error("BizService.UpdateTagByID failed")
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

// 删除标签
func (h *Handler) DeleteTag(ctx context.Context,
	req *api.DeleteTagRequest,
) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	err = h.BizService.DeleteTagByID(ctx, req.Id)
	if err != nil {
		log.WithError(err).Error("BizService.DeleteTagByID failed")
		return nil, err
	}
	return &emptypb.Empty{}, nil
}
