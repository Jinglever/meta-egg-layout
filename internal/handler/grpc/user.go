// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.1
// Author: meta-egg
// Generated at: 2025-08-26 01:09

package handler

import (
	"context"
	api "meta-egg-layout/api/meta_egg_layout"
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/common/constraint"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"
	"time"

	jgstr "github.com/Jinglever/go-string"
	"google.golang.org/protobuf/types/known/emptypb"
)

func (h *Handler) ToUserDetail(ctx context.Context,
	bo *biz.UserBO,
) (*api.UserDetail, error) {
	var birthday *string
	if bo.Birthday != nil {
		*birthday = bo.Birthday.Format(constraint.DateFormat)
	}
	var userPhones []*api.UserPhoneDetail
	for _, userPhoneBO := range bo.UserPhones {
		userPhoneDetail := &api.UserPhoneDetail{
			Id:          userPhoneBO.ID,
			UserId:      userPhoneBO.UserID,
			PhoneNumber: userPhoneBO.PhoneNumber,
			CreatedBy:   userPhoneBO.CreatedBy,
			CreatedAt:   userPhoneBO.CreatedAt.Format(constraint.SecondTimeFormat),
		}
		userPhones = append(userPhones, userPhoneDetail)
	}
	return &api.UserDetail{
		Id:         bo.ID,
		Name:       bo.Name,
		Gender:     bo.Gender,
		Age:        uint32(bo.Age),
		IsOnJob:    bo.IsOnJob,
		Birthday:   birthday,
		CreatedBy:  bo.CreatedBy,
		CreatedAt:  bo.CreatedAt.Format(constraint.SecondTimeFormat),
		UpdatedBy:  bo.UpdatedBy,
		UpdatedAt:  bo.UpdatedAt.Format(constraint.SecondTimeFormat),
		UserPhones: userPhones,
	}, nil
}

// 创建用户
func (h *Handler) CreateUser(ctx context.Context,
	req *api.CreateUserRequest,
) (*api.UserDetail, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	var birthday *time.Time
	if req.Birthday != nil {
		t, err := time.ParseInLocation(constraint.DateFormat, *req.Birthday, time.Local)
		if err != nil {
			log.WithError(err).Errorf("fail to parse time: %s", *req.Birthday)
			return nil, cerror.InvalidArgument("Birthday")
		}
		birthday = &t
	}
	var userPhones []*biz.UserPhoneBO
	for _, userPhoneData := range req.UserPhones {
		userPhoneBO := &biz.UserPhoneBO{
			PhoneNumber: userPhoneData.PhoneNumber,
		}
		userPhones = append(userPhones, userPhoneBO)
	}
	userBO := &biz.UserBO{
		Name:       req.Name,
		Gender:     req.Gender,
		Age:        uint8(req.Age),
		IsOnJob:    req.IsOnJob,
		Birthday:   birthday,
		UserPhones: userPhones,
	}
	err = h.BizService.CreateUser(ctx, userBO)
	if err != nil {
		log.WithError(err).Error("BizService.CreateUser failed")
		return nil, err
	}
	d, err := h.ToUserDetail(ctx, userBO)
	if err != nil {
		log.WithError(err).Error("convert UserBO to UserDetail failed")
		return nil, err
	}
	return d, nil
}

// 获取用户详情
func (h *Handler) GetUserDetail(ctx context.Context,
	req *api.GetUserDetailRequest,
) (*api.UserDetail, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	userBO, err := h.BizService.GetUserByID(ctx, req.Id)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserByID failed")
		return nil, err
	}
	d, err := h.ToUserDetail(ctx, userBO)
	if err != nil {
		log.WithError(err).Error("convert UserBO to UserDetail failed")
		return nil, err
	}
	return d, nil
}

func (h *Handler) ToUserListInfo(ctx context.Context,
	objs []*biz.UserListBO,
) ([]*api.UserListInfo, error) {
	list := make([]*api.UserListInfo, 0, len(objs))
	for i := range objs {
		var userPhones []*api.UserPhoneListInfo
		for _, userPhoneBO := range objs[i].UserPhones {
			userPhoneListInfo := &api.UserPhoneListInfo{
				Id:          userPhoneBO.ID,
				UserId:      userPhoneBO.UserID,
				PhoneNumber: userPhoneBO.PhoneNumber,
			}
			userPhones = append(userPhones, userPhoneListInfo)
		}
		list = append(list, &api.UserListInfo{
			Id:         objs[i].ID,
			Name:       objs[i].Name,
			Gender:     objs[i].Gender,
			UserPhones: userPhones,
		})
	}
	return list, nil
}

// 获取用户列表
func (h *Handler) GetUserList(ctx context.Context,
	req *api.GetUserListRequest,
) (*api.GetUserListResponse, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	opt := &biz.UserListOption{
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Filter: &biz.UserFilterOption{
			Gender:  req.Gender,
			IsOnJob: req.IsOnJob,
		},
	}
	if req.Pagination != nil {
		opt.Pagination = &option.PaginationOption{
			Page:     int(req.Pagination.Page),
			PageSize: int(req.Pagination.PageSize),
		}
	}
	userBOs, total, err := h.BizService.GetUserList(ctx, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserList failed")
		return nil, err
	}
	list, err := h.ToUserListInfo(ctx, userBOs)
	if err != nil {
		log.WithError(err).Error("convert UserListBO to UserListInfo failed")
		return nil, err
	}
	return &api.GetUserListResponse{
		List:  list,
		Total: total,
	}, nil
}

// 更新用户
func (h *Handler) UpdateUser(ctx context.Context,
	req *api.UpdateUserRequest,
) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	var age *uint8
	if req.Age != nil {
		*age = uint8(*req.Age)
	}
	var birthday *time.Time
	if req.Birthday != nil {
		t, err := time.ParseInLocation(constraint.DateFormat, *req.Birthday, time.Local)
		if err != nil {
			log.WithError(err).Errorf("fail to parse time: %s", *req.Birthday)
			return nil, cerror.InvalidArgument("Birthday")
		}
		birthday = &t
	}
	setOpt := &biz.UserSetOption{
		Name:     req.Name,
		Gender:   req.Gender,
		Age:      age,
		IsOnJob:  req.IsOnJob,
		Birthday: birthday,
	}
	err = h.BizService.UpdateUserByID(ctx, req.Id, setOpt)
	if err != nil {
		log.WithError(err).Error("BizService.UpdateUserByID failed")
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

// 删除用户
func (h *Handler) DeleteUser(ctx context.Context,
	req *api.DeleteUserRequest,
) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	err = h.BizService.DeleteUserByID(ctx, req.Id)
	if err != nil {
		log.WithError(err).Error("BizService.DeleteUserByID failed")
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

// 添加用户电话
func (h *Handler) AddUserPhone(ctx context.Context,
	req *api.AddUserPhoneRequest,
) (*api.UserPhoneDetail, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	userPhoneBO := &biz.UserPhoneBO{
		PhoneNumber: req.PhoneNumber,
	}
	err = h.BizService.AddUserPhone(ctx, req.UserId, userPhoneBO)
	if err != nil {
		log.WithError(err).Error("BizService.AddUserPhone failed")
		return nil, err
	}
	d := &api.UserPhoneDetail{
		Id:          userPhoneBO.ID,
		UserId:      userPhoneBO.UserID,
		PhoneNumber: userPhoneBO.PhoneNumber,
		CreatedBy:   userPhoneBO.CreatedBy,
		CreatedAt:   userPhoneBO.CreatedAt.Format(constraint.SecondTimeFormat),
	}
	return d, nil
}

// 删除用户电话
func (h *Handler) RemoveUserPhone(ctx context.Context,
	req *api.RemoveUserPhoneRequest,
) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	err = h.BizService.RemoveUserPhone(ctx, req.UserId, req.UserPhoneId)
	if err != nil {
		log.WithError(err).Error("BizService.RemoveUserPhone failed")
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

// 获取所有用户电话
func (h *Handler) GetAllUserPhone(ctx context.Context,
	req *api.GetAllUserPhoneRequest,
) (*api.GetAllUserPhoneResponse, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}
	userPhoneBOs, err := h.BizService.GetAllUserPhone(ctx, req.UserId)
	if err != nil {
		log.WithError(err).Error("BizService.GetAllUserPhone failed")
		return nil, err
	}
	list := make([]*api.UserPhoneDetail, 0, len(userPhoneBOs))
	for _, userPhoneBO := range userPhoneBOs {
		detail := &api.UserPhoneDetail{
			Id:          userPhoneBO.ID,
			UserId:      userPhoneBO.UserID,
			PhoneNumber: userPhoneBO.PhoneNumber,
			CreatedBy:   userPhoneBO.CreatedBy,
			CreatedAt:   userPhoneBO.CreatedAt.Format(constraint.SecondTimeFormat),
		}
		list = append(list, detail)
	}
	return &api.GetAllUserPhoneResponse{
		List: list,
	}, nil
}
