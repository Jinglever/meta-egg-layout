// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.0
// Author: meta-egg
// Generated at: 2025-08-24 21:54

package handler

import (
	"context"

	api "meta-egg-layout/api/meta_egg_layout"
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/common/cerror"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"

	"google.golang.org/protobuf/types/known/emptypb"

	jgstr "github.com/Jinglever/go-string"
)

// 获取与指定用户关联的标签列表
func (h *Handler) GetTagListByUserID(ctx context.Context, req *api.GetTagListByUserIDRequest) (*api.GetTagListResponse, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	opt := &biz.TagListOption{
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Filter: &biz.TagFilterOption{},
	}
	if req.Pagination != nil {
		opt.Pagination = &option.PaginationOption{
			Page:     int(req.Pagination.Page),
			PageSize: int(req.Pagination.PageSize),
		}
	}
	tagBOs, total, err := h.BizService.GetTagListByUserID(ctx, req.UserId, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagListByUserID failed")
		return nil, err
	}
	list, err := h.ToTagListInfo(ctx, tagBOs)
	if err != nil {
		log.WithError(err).Error("convert TagListBO to TagListInfo failed")
		return nil, err
	}
	return &api.GetTagListResponse{
		List:  list,
		Total: total,
	}, nil
}

// 获取与指定标签关联的用户列表
func (h *Handler) GetUserListByTagID(ctx context.Context, req *api.GetUserListByTagIDRequest) (*api.GetUserListResponse, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	opt := &biz.UserListOption{
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Filter: &biz.UserFilterOption{
			Gender:  req.Gender,
			IsOnJob: req.IsOnJob,
		},
	}
	if req.Pagination != nil {
		opt.Pagination = &option.PaginationOption{
			Page:     int(req.Pagination.Page),
			PageSize: int(req.Pagination.PageSize),
		}
	}
	userBOs, total, err := h.BizService.GetUserListByTagID(ctx, req.TagId, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserListByTagID failed")
		return nil, err
	}
	list, err := h.ToUserListInfo(ctx, userBOs)
	if err != nil {
		log.WithError(err).Error("convert UserListBO to UserListInfo failed")
		return nil, err
	}
	return &api.GetUserListResponse{
		List:  list,
		Total: total,
	}, nil
}

// 给指定用户批量分配标签
func (h *Handler) BindTagsToUser(ctx context.Context, req *api.BindTagsToUserRequest) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	err = h.BizService.BindTagsToUser(ctx, req.UserId, req.TagIds)
	if err != nil {
		log.WithError(err).Error("BizService.BindTagsToUser failed")
		return nil, err
	}

	return &emptypb.Empty{}, nil
}

// 给指定标签批量分配用户
func (h *Handler) BindUsersToTag(ctx context.Context, req *api.BindUsersToTagRequest) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	err = h.BizService.BindUsersToTag(ctx, req.TagId, req.UserIds)
	if err != nil {
		log.WithError(err).Error("BizService.BindUsersToTag failed")
		return nil, err
	}

	return &emptypb.Empty{}, nil
}

// 从指定用户解除与多个标签的关联
func (h *Handler) UnbindTagsFromUser(ctx context.Context, req *api.UnbindTagsFromUserRequest) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	err = h.BizService.UnbindTagsFromUser(ctx, req.UserId, req.TagIds)
	if err != nil {
		log.WithError(err).Error("BizService.UnbindTagsFromUser failed")
		return nil, err
	}

	return &emptypb.Empty{}, nil
}

// 从指定标签解除与多个用户的关联
func (h *Handler) UnbindUsersFromTag(ctx context.Context, req *api.UnbindUsersFromTagRequest) (*emptypb.Empty, error) {
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	err := req.ValidateAll()
	if err != nil {
		log.WithError(err).Error("req.ValidateAll failed")
		return nil, cerror.InvalidArgument(err.Error())
	}

	err = h.BizService.UnbindUsersFromTag(ctx, req.TagId, req.UserIds)
	if err != nil {
		log.WithError(err).Error("BizService.UnbindUsersFromTag failed")
		return nil, err
	}

	return &emptypb.Empty{}, nil
}
