// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.1
// Author: meta-egg
// Generated at: 2025-08-26 01:11

package handler

import (
	"context"
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"

	jgstr "github.com/Jinglever/go-string"
	"github.com/gin-gonic/gin"
)

// 标签详情
type TagDetail struct {
	Id   uint64 `json:"id"`   //
	Name string `json:"name"` // 标签名称
}

func (h *Handler) ToTagDetail(ctx context.Context, bo *biz.TagBO) (*TagDetail, error) {
	return &TagDetail{
		Id:   bo.ID,
		Name: bo.Name,
	}, nil
}

type ReqCreateTag struct {
}

//	@Id			CreateTag
//	@Tags		标签
//	@Summary	创建标签
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string			true	"Bearer <jwt-token>"
//	@Param		body			body		ReqCreateTag	true	"标签"
//	@Success	200				{object}	RspData{data=TagDetail}
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags [post]
func (h *Handler) CreateTag(c *gin.Context) {
	var req ReqCreateTag
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))

	tagBO := &biz.TagBO{}
	err = h.BizService.CreateTag(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("BizService.CreateTag failed")
		ResponseFail(c, err)
		return
	}
	d, err := h.ToTagDetail(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("convert TagBO to TagDetail failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, d)
}

//	@Id			GetTagDetail
//	@Tags		标签
//	@Summary	获取标签详情
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		id				path		int		true	"标签ID"
//	@Success	200				{object}	RspData{data=TagDetail}
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{id} [get]
func (h *Handler) GetTagDetail(c *gin.Context) {
	id := jgstr.UintVal(c.Param("id"))
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).WithField("id", id)
	tagBO, err := h.BizService.GetTagByID(ctx, id)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagByID failed")
		ResponseFail(c, err)
		return
	}
	d, err := h.ToTagDetail(ctx, tagBO)
	if err != nil {
		log.WithError(err).Error("convert TagBO to TagDetail failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, d)
}

// 标签列表信息
type TagListInfo struct {
	Id   uint64 `json:"id"`   //
	Name string `json:"name"` // 标签名称
}

func (h *Handler) ToTagListInfo(ctx context.Context, objs []*biz.TagListBO) ([]*TagListInfo, error) {
	list := make([]*TagListInfo, 0, len(objs))
	for i := range objs {
		list = append(list, &TagListInfo{
			Id:   objs[i].ID,
			Name: objs[i].Name,
		})
	}
	return list, nil
}

// 标签列表
type TagList struct {
	List  []*TagListInfo `json:"list"`  // 标签列表
	Total int64          `json:"total"` // 总数
}

type ReqGetTagList struct {
	Page     int `form:"page" binding:"required,gte=1"`      // 页码, 从1开始
	PageSize int `form:"page_size" binding:"required,gte=1"` // 每页数量, 要求大于0
	// 排序条件
	OrderBy   *string `form:"order_by" binding:"omitempty,oneof=id"`         // 排序字段,可选:id
	OrderType *string `form:"order_type" binding:"omitempty,oneof=asc desc"` // 排序类型,默认desc
}

//	@Id			GetTagList
//	@Tags		标签
//	@Summary	获取标签列表
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		page			query		int		true	"页码, 从1开始"
//	@Param		page_size		query		int		true	"每页数量, 要求大于0"
//	@Param		order_by		query		string	false	"排序字段, 可选: id"
//	@Param		order_type		query		string	false	"排序类型,默认desc"
//	@Success	200				{object}	RspData{data=TagList}
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags [get]
func (h *Handler) GetTagList(c *gin.Context) {
	var req ReqGetTagList
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("req", jgstr.JsonEncode(req))
	opt := &biz.TagListOption{
		Pagination: &option.PaginationOption{
			Page:     req.Page,
			PageSize: req.PageSize,
		},
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
	}
	tagBOs, total, err := h.BizService.GetTagList(ctx, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagList failed")
		ResponseFail(c, err)
		return
	}
	list, err := h.ToTagListInfo(ctx, tagBOs)
	if err != nil {
		log.WithError(err).Error("convert TagListBO to TagListInfo failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, TagList{
		List:  list,
		Total: total,
	})
}

type ReqUpdateTag struct {
}

//	@Id			UpdateTag
//	@Tags		标签
//	@Summary	更新标签
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string			true	"Bearer <jwt-token>"
//	@Param		id				path		int				true	"标签ID"
//	@Param		body			body		ReqUpdateTag	true	"请求体"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{id} [put]
func (h *Handler) UpdateTag(c *gin.Context) {
	id := jgstr.UintVal(c.Param("id"))
	var req ReqUpdateTag
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("id", id).
		WithField("req", jgstr.JsonEncode(req))
	setOpt := &biz.TagSetOption{}
	err = h.BizService.UpdateTagByID(ctx, id, setOpt)
	if err != nil {
		log.WithError(err).Error("BizService.UpdateTagByID failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, nil)
}

//	@Id			DeleteTag
//	@Tags		标签
//	@Summary	删除标签
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		id				path		int		true	"标签ID"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{id} [delete]
func (h *Handler) DeleteTag(c *gin.Context) {
	id := jgstr.UintVal(c.Param("id"))
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).WithField("id", id)
	err := h.BizService.DeleteTagByID(ctx, id)
	if err != nil {
		log.WithError(err).Error("BizService.DeleteTagByID failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, nil)
}
