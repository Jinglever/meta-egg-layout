// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v1.5.6-IE
// Author: meta-egg
// Generated at: 2023-05-29 11:03

package handler

import (
	"context"
	"meta-egg-layout/gen/model"
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/biz/option"
	"meta-egg-layout/internal/common/constraint"
	"meta-egg-layout/internal/common/contexts"

	jgstr "github.com/Jinglever/go-string"
	"github.com/gin-gonic/gin"
)

// 用户详情
type UserDetail struct {
	Id        uint64  `json:"id"`         //
	Name      *string `json:"name"`       // 用户名 (nullable)
	Gender    uint64  `json:"gender"`     // 性别
	Age       uint8   `json:"age"`        // 年龄
	IsOnJob   bool    `json:"is_on_job"`  // 是否在职
	CreatedBy *uint64 `json:"created_by"` // 创建者 (nullable)
	CreatedAt string  `json:"created_at"` // 创建时间
	UpdatedBy *uint64 `json:"updated_by"` // 更新者 (nullable)
	UpdatedAt string  `json:"updated_at"` // 更新时间
}

func (h *Handler) newUserDetailFromModel(ctx context.Context, mUser *model.User) UserDetail {
	return UserDetail{
		Id:        mUser.ID,
		Name:      mUser.Name,
		Gender:    mUser.Gender,
		Age:       mUser.Age,
		IsOnJob:   mUser.IsOnJob,
		CreatedBy: mUser.CreatedBy,
		CreatedAt: mUser.CreatedAt.Format(constraint.SecondTimeFormat),
		UpdatedBy: mUser.UpdatedBy,
		UpdatedAt: mUser.UpdatedAt.Format(constraint.SecondTimeFormat),
	}
}

type ReqCreateUser struct {
	Name    *string `json:"name" binding:"omitempty,max=64"` // 用户名
	Gender  uint64  `json:"gender" binding:"required,gte=1"` // 性别
	Age     uint8   `json:"age" binding:"required"`          // 年龄
	IsOnJob bool    `json:"is_on_job" binding:"required"`    // 是否在职
}

//	@Id			CreateUser
//	@Tags		用户
//	@Summary	创建用户
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string			true	"Bearer <jwt-token>"
//	@Param		body			body		ReqCreateUser	true	"用户"
//	@Success	200				{object}	RspData{data=UserDetail}
//	@Failure	400				{object}	RspBase
//	@Router		/v1/users [post]
func (h *Handler) CreateUser(c *gin.Context) {
	log := contexts.GetLogger(c.Request.Context())
	var req ReqCreateUser
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}

	mUser := &model.User{
		Name:    req.Name,
		Gender:  req.Gender,
		Age:     req.Age,
		IsOnJob: req.IsOnJob,
	}
	err = h.BizService.CreateUser(c.Request.Context(), mUser)
	if err != nil {
		log.WithError(err).Error("BizService.CreateUser failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, h.newUserDetailFromModel(c.Request.Context(), mUser))
}

//	@Id			GetUserDetail
//	@Tags		用户
//	@Summary	获取用户详情
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		id				path		int		true	"用户ID"
//	@Success	200				{object}	RspData{data=UserDetail}
//	@Failure	400				{object}	RspBase
//	@Router		/v1/users/{id} [get]
func (h *Handler) GetUserDetail(c *gin.Context) {
	log := contexts.GetLogger(c.Request.Context())
	id := jgstr.UintVal(c.Param("id"))
	mUser, err := h.BizService.GetUserByID(c.Request.Context(), id)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserByID failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, h.newUserDetailFromModel(c.Request.Context(), mUser))
}

// 用户列表信息
type UserListInfo struct {
	Id     uint64  `json:"id"`     //
	Name   *string `json:"name"`   // 用户名 (nullable)
	Gender uint64  `json:"gender"` // 性别
}

func (h *Handler) newUserListInfoFromModels(ctx context.Context, msUser []*model.User) []*UserListInfo {
	list := make([]*UserListInfo, 0, len(msUser))
	for i := range msUser {
		list = append(list, &UserListInfo{
			Id:     msUser[i].ID,
			Name:   msUser[i].Name,
			Gender: msUser[i].Gender,
		})
	}
	return list
}

// 用户列表
type UserList struct {
	List  []*UserListInfo `json:"list"`  // 用户列表
	Total int64           `json:"total"` // 总数
}

type ReqGetUserList struct {
	Page     int `form:"page" binding:"required,gte=1"`      // 页码, 从1开始
	PageSize int `form:"page_size" binding:"required,gte=1"` // 每页数量, 要求大于0
	// 筛选条件
	Gender  *uint64 `form:"gender" binding:"omitempty,gte=1"` // 性别
	IsOnJob *bool   `form:"is_on_job" binding:"omitempty"`    // 是否在职
	// 排序条件
	OrderBy   *string           `form:"order_by" binding:"omitempty,oneof=id"`         // 排序字段,可选:id
	OrderType *option.OrderType `form:"order_type" binding:"omitempty,oneof=asc desc"` // 排序类型,默认desc
}

//	@Id			GetUserList
//	@Tags		用户
//	@Summary	获取用户列表
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		page			query		int		true	"页码, 从1开始"
//	@Param		page_size		query		int		true	"每页数量, 要求大于0"
//	@Param		gender			query		uint64	false	"性别"
//	@Param		is_on_job		query		bool	false	"是否在职"
//	@Param		order_by		query		string	false	"排序字段, 可选: id"
//	@Param		order_type		query		string	false	"排序类型,默认desc"
//	@Success	200				{object}	RspData{data=UserList}
//	@Failure	400				{object}	RspBase
//	@Router		/v1/users [get]
func (h *Handler) GetUserList(c *gin.Context) {
	log := contexts.GetLogger(c.Request.Context())
	var req ReqGetUserList
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	opt := &biz.UserListOption{
		Pagination: &option.PaginationOption{
			Page:     req.Page,
			PageSize: req.PageSize,
		},
		Filter: &biz.UserFilterOption{
			Gender:  req.Gender,
			IsOnJob: req.IsOnJob,
		},
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Select: []interface{}{
			model.ColUserID,
			model.ColUserName,
			model.ColUserGender,
		},
	}
	msUser, total, err := h.BizService.GetUserList(c.Request.Context(), opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserList failed")
		ResponseFail(c, err)
		return
	}
	list := h.newUserListInfoFromModels(c.Request.Context(), msUser)
	ResponseSuccess(c, UserList{
		List:  list,
		Total: total,
	})
}

type ReqUpdateUser struct {
	Name    *string `json:"name" binding:"omitempty,max=64"`  // 用户名
	Gender  *uint64 `json:"gender" binding:"omitempty,gte=1"` // 性别
	Age     *uint8  `json:"age" binding:"omitempty"`          // 年龄
	IsOnJob *bool   `json:"is_on_job" binding:"omitempty"`    // 是否在职
}

//	@Id			UpdateUser
//	@Tags		用户
//	@Summary	更新用户
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string			true	"Bearer <jwt-token>"
//	@Param		id				path		int				true	"用户ID"
//	@Param		body			body		ReqUpdateUser	true	"请求体"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/v1/users/{id} [put]
func (h *Handler) UpdateUser(c *gin.Context) {
	log := contexts.GetLogger(c.Request.Context())
	id := jgstr.UintVal(c.Param("id"))
	var req ReqUpdateUser
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	opt := &biz.UserUpdateOption{
		Set: &biz.UserSetOption{
			Name:    req.Name,
			Gender:  req.Gender,
			Age:     req.Age,
			IsOnJob: req.IsOnJob,
		},
	}
	err = h.BizService.UpdateUserByID(c.Request.Context(), id, opt)
	if err != nil {
		log.WithError(err).Error("BizService.UpdateUserByID failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, nil)
}

//	@Id			DeleteUser
//	@Tags		用户
//	@Summary	删除用户
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		id				path		int		true	"用户ID"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/v1/users/{id} [delete]
func (h *Handler) DeleteUser(c *gin.Context) {
	log := contexts.GetLogger(c.Request.Context())
	id := jgstr.UintVal(c.Param("id"))
	err := h.BizService.DeleteUserByID(c.Request.Context(), id)
	if err != nil {
		log.WithError(err).Error("BizService.DeleteUserByID failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, nil)
}
