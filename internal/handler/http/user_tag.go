// Code generated by meta-egg. CAREFULLY EDIT.
// WILL NOT BE replace after re-generated, unless you confirm it!
// CAREFULLY EDIT.
// Version: v3.8.1
// Author: meta-egg
// Generated at: 2025-08-26 01:11

package handler

import (
	"meta-egg-layout/internal/biz"
	"meta-egg-layout/internal/common/contexts"
	"meta-egg-layout/internal/repo/option"

	jgstr "github.com/Jinglever/go-string"
	"github.com/gin-gonic/gin"
)

type ReqGetTagListByUserID struct {
	Page     int `form:"page" binding:"required,gte=1"`      // 页码, 从1开始
	PageSize int `form:"page_size" binding:"required,gte=1"` // 每页数量, 要求大于0
	// 排序条件
	OrderBy   *string `form:"order_by" binding:"omitempty"`   // 排序字段
	OrderType *string `form:"order_type" binding:"omitempty"` // 排序类型: asc, desc
}

//	@Id			GetTagListByUserID
//	@Tags		用户标签关系
//	@Summary	获取与指定用户关联的标签列表
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		user_id			path		int		true	"用户ID"
//	@Param		page			query		int		true	"页码, 从1开始"
//	@Param		page_size		query		int		true	"每页数量, 要求大于0"
//	@Param		order_by		query		string	false	"排序字段,可选:id"
//	@Param		order_type		query		string	false	"排序类型,默认desc"
//	@Success	200				{object}	RspData{data=TagList}
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/users/{user_id}/tags [get]
func (h *Handler) GetTagListByUserID(c *gin.Context) {
	userId := jgstr.UintVal(c.Param("user_id"))
	var req ReqGetTagListByUserID
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("userId", userId).
		WithField("req", jgstr.JsonEncode(req))

	opt := &biz.TagListOption{
		Pagination: &option.PaginationOption{
			Page:     req.Page,
			PageSize: req.PageSize,
		},
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Filter: &biz.TagFilterOption{},
	}
	tagBOs, total, err := h.BizService.GetTagListByUserID(ctx, userId, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetTagListByUserID failed")
		ResponseFail(c, err)
		return
	}
	list, err := h.ToTagListInfo(ctx, tagBOs)
	if err != nil {
		log.WithError(err).Error("convert TagListBO to TagListInfo failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, TagList{
		List:  list,
		Total: total,
	})
}

type ReqGetUserListByTagID struct {
	Page     int `form:"page" binding:"required,gte=1"`      // 页码, 从1开始
	PageSize int `form:"page_size" binding:"required,gte=1"` // 每页数量, 要求大于0
	// 筛选条件
	Gender  *uint64 `form:"gender" binding:"omitempty,gte=1"` // 性别
	IsOnJob *bool   `form:"isOnJob" binding:"omitempty"`      // 是否在职
	// 排序条件
	OrderBy   *string `form:"order_by" binding:"omitempty"`   // 排序字段
	OrderType *string `form:"order_type" binding:"omitempty"` // 排序类型: asc, desc
}

//	@Id			GetUserListByTagID
//	@Tags		用户标签关系
//	@Summary	获取与指定标签关联的用户列表
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string	true	"Bearer <jwt-token>"
//	@Param		tag_id			path		int		true	"标签ID"
//	@Param		page			query		int		true	"页码, 从1开始"
//	@Param		page_size		query		int		true	"每页数量, 要求大于0"
//	@Param		gender			query		uint64	false	"性别"
//	@Param		is_on_job		query		bool	false	"是否在职"
//	@Param		order_by		query		string	false	"排序字段,可选:id"
//	@Param		order_type		query		string	false	"排序类型,默认desc"
//	@Success	200				{object}	RspData{data=UserList}
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{tag_id}/users [get]
func (h *Handler) GetUserListByTagID(c *gin.Context) {
	tagId := jgstr.UintVal(c.Param("tag_id"))
	var req ReqGetUserListByTagID
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("tagId", tagId).
		WithField("req", jgstr.JsonEncode(req))

	opt := &biz.UserListOption{
		Pagination: &option.PaginationOption{
			Page:     req.Page,
			PageSize: req.PageSize,
		},
		Order: &option.OrderOption{
			OrderBy:   req.OrderBy,
			OrderType: req.OrderType,
		},
		Filter: &biz.UserFilterOption{
			Gender:  req.Gender,
			IsOnJob: req.IsOnJob,
		},
	}
	userBOs, total, err := h.BizService.GetUserListByTagID(ctx, tagId, opt)
	if err != nil {
		log.WithError(err).Error("BizService.GetUserListByTagID failed")
		ResponseFail(c, err)
		return
	}
	list, err := h.ToUserListInfo(ctx, userBOs)
	if err != nil {
		log.WithError(err).Error("convert UserListBO to UserListInfo failed")
		ResponseFail(c, err)
		return
	}
	ResponseSuccess(c, UserList{
		List:  list,
		Total: total,
	})
}

type ReqBindTagsToUser struct {
	TagIds []uint64 `json:"tag_ids" binding:"required"` // 标签ID列表
}

//	@Id			BindTagsToUser
//	@Tags		用户标签关系
//	@Summary	给指定用户批量分配标签
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string				true	"Bearer <jwt-token>"
//	@Param		user_id			path		int					true	"用户ID"
//	@Param		body			body		ReqBindTagsToUser	true	"批量分配请求"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/users/{user_id}/bind-tags [post]
func (h *Handler) BindTagsToUser(c *gin.Context) {
	userId := jgstr.UintVal(c.Param("user_id"))
	var req ReqBindTagsToUser
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("userId", userId).
		WithField("req", jgstr.JsonEncode(req))

	err = h.BizService.BindTagsToUser(ctx, userId, req.TagIds)
	if err != nil {
		log.WithError(err).Error("BizService.BindTagsToUser failed")
		ResponseFail(c, err)
		return
	}

	ResponseSuccess(c, nil)
}

type ReqBindUsersToTag struct {
	UserIds []uint64 `json:"user_ids" binding:"required"` // 用户ID列表
}

//	@Id			BindUsersToTag
//	@Tags		用户标签关系
//	@Summary	给指定标签批量分配用户
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string				true	"Bearer <jwt-token>"
//	@Param		tag_id			path		int					true	"标签ID"
//	@Param		body			body		ReqBindUsersToTag	true	"批量分配请求"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{tag_id}/bind-users [post]
func (h *Handler) BindUsersToTag(c *gin.Context) {
	tagId := jgstr.UintVal(c.Param("tag_id"))
	var req ReqBindUsersToTag
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("tagId", tagId).
		WithField("req", jgstr.JsonEncode(req))

	err = h.BizService.BindUsersToTag(ctx, tagId, req.UserIds)
	if err != nil {
		log.WithError(err).Error("BizService.BindUsersToTag failed")
		ResponseFail(c, err)
		return
	}

	ResponseSuccess(c, nil)
}

type ReqUnbindTagsFromUser struct {
	TagIds []uint64 `json:"tag_ids" binding:"required"` // 标签ID列表
}

//	@Id			UnbindTagsFromUser
//	@Tags		用户标签关系
//	@Summary	从指定用户解除与多个标签的关联
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string					true	"Bearer <jwt-token>"
//	@Param		user_id			path		int						true	"用户ID"
//	@Param		body			body		ReqUnbindTagsFromUser	true	"批量解绑请求"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/users/{user_id}/unbind-tags [post]
func (h *Handler) UnbindTagsFromUser(c *gin.Context) {
	userId := jgstr.UintVal(c.Param("user_id"))
	var req ReqUnbindTagsFromUser
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("userId", userId).
		WithField("req", jgstr.JsonEncode(req))

	err = h.BizService.UnbindTagsFromUser(ctx, userId, req.TagIds)
	if err != nil {
		log.WithError(err).Error("BizService.UnbindTagsFromUser failed")
		ResponseFail(c, err)
		return
	}

	ResponseSuccess(c, nil)
}

type ReqUnbindUsersFromTag struct {
	UserIds []uint64 `json:"user_ids" binding:"required"` // 用户ID列表
}

//	@Id			UnbindUsersFromTag
//	@Tags		用户标签关系
//	@Summary	从指定标签解除与多个用户的关联
//	@Description
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string					true	"Bearer <jwt-token>"
//	@Param		tag_id			path		int						true	"标签ID"
//	@Param		body			body		ReqUnbindUsersFromTag	true	"批量解绑请求"
//	@Success	200				{object}	RspBase
//	@Failure	400				{object}	RspBase
//	@Router		/api/v1/tags/{tag_id}/unbind-users [post]
func (h *Handler) UnbindUsersFromTag(c *gin.Context) {
	tagId := jgstr.UintVal(c.Param("tag_id"))
	var req ReqUnbindUsersFromTag
	err := shouldBind(c, &req)
	if err != nil {
		ResponseFail(c, err)
		return
	}
	ctx := c.Request.Context()
	log := contexts.GetLogger(ctx).
		WithField("tagId", tagId).
		WithField("req", jgstr.JsonEncode(req))

	err = h.BizService.UnbindUsersFromTag(ctx, tagId, req.UserIds)
	if err != nil {
		log.WithError(err).Error("BizService.UnbindUsersFromTag failed")
		ResponseFail(c, err)
		return
	}

	ResponseSuccess(c, nil)
}
